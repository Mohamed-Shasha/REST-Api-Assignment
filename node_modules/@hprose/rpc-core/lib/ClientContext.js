"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| ClientContext.ts                                         |
|                                                          |
| ClientContext for TypeScript.                            |
|                                                          |
| LastModified: Dec 30, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Context_1 = require("./Context");
var ClientContext = /** @class */ (function (_super) {
    __extends(ClientContext, _super);
    function ClientContext(items) {
        var _this = _super.call(this) || this;
        if (!!items) {
            _this.copy(items, _this);
            if ('requestHeaders' in items) {
                _this.copy(items['requestHeaders'], _this.requestHeaders);
            }
        }
        return _this;
    }
    ClientContext.prototype.init = function (client, returnType) {
        this.client = client;
        if (client.uris.length > 0)
            this.uri = client.uris[0];
        if (this.returnType === undefined)
            this.returnType = returnType;
        if (this.timeout === undefined)
            this.timeout = client.timeout;
        this.copy(client.requestHeaders, this.requestHeaders);
    };
    return ClientContext;
}(Context_1.Context));
exports.ClientContext = ClientContext;
//# sourceMappingURL=ClientContext.js.map