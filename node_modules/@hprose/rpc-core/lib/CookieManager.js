"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| CookieManager.ts                                         |
|                                                          |
| CookieManager for TypeScript.                            |
|                                                          |
| LastModified: Dec 18, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
Object.defineProperty(exports, "__esModule", { value: true });
var cookieManager = Object.create(null);
function setCookie(headers, host) {
    if (host === void 0) { host = '@'; }
    function _setCookie(value) {
        var _a;
        if (value === undefined)
            return;
        var cookies = value.trim().split(';');
        var cookie = Object.create(null);
        _a = cookies[0].trim().split('=', 2), cookie.name = _a[0], cookie.value = _a[1];
        for (var i = 1; i < cookies.length; i++) {
            var _b = cookies[i].trim().split('=', 2), k = _b[0], v = _b[1];
            cookie[k.toUpperCase()] = v;
        }
        // Tomcat can return SetCookie2 with path wrapped in "
        if (cookie.PATH) {
            var n = cookie.PATH.length;
            if (n > 2 && cookie.PATH.charAt(0) === '"' && cookie.PATH.charAt(n - 1) === '"') {
                cookie.PATH = cookie.PATH.substr(1, n - 2);
            }
        }
        else {
            cookie.PATH = '/';
        }
        if (cookie.EXPIRES) {
            cookie.EXPIRES = Date.parse(cookie.EXPIRES);
        }
        if (cookie.DOMAIN) {
            cookie.DOMAIN = cookie.DOMAIN.toLowerCase();
        }
        else {
            cookie.DOMAIN = host;
        }
        cookie.SECURE = (cookie.SECURE !== undefined);
        if (cookieManager[cookie.DOMAIN] === undefined) {
            cookieManager[cookie.DOMAIN] = Object.create(null);
        }
        cookieManager[cookie.DOMAIN][cookie.name] = cookie;
    }
    for (var name_1 in headers) {
        name_1 = name_1.toLowerCase();
        if ((name_1 === 'set-cookie') || (name_1 === 'set-cookie2')) {
            var value = headers[name_1];
            (Array.isArray(value) ? value : [value]).forEach(_setCookie);
        }
    }
}
exports.setCookie = setCookie;
function getCookie(host, path, secure) {
    host = (host !== null && host !== void 0 ? host : '@');
    path = (path !== null && path !== void 0 ? path : '/');
    var cookies = [];
    for (var domain in cookieManager) {
        if (host.indexOf(domain) > -1) {
            var names = [];
            for (var name_2 in cookieManager[domain]) {
                var cookie = cookieManager[domain][name_2];
                if (cookie.EXPIRES && ((new Date()).getTime() > cookie.EXPIRES)) {
                    names.push(name_2);
                }
                else if (path.indexOf(cookie.PATH) === 0) {
                    if ((secure === cookie.SECURE) && (cookie.value !== null)) {
                        cookies.push(cookie.name + '=' + cookie.value);
                    }
                }
            }
            for (var i = 0, n = names.length; i < n; ++i) {
                delete cookieManager[domain][names[i]];
            }
        }
    }
    if (cookies.length > 0) {
        return cookies.join('; ');
    }
    return '';
}
exports.getCookie = getCookie;
//# sourceMappingURL=CookieManager.js.map