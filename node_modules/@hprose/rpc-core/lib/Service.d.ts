import { ServiceCodec } from './ServiceCodec';
import { Context } from './Context';
import { InvokeHandler } from './InvokeManager';
import { IOHandler } from './IOManager';
import { MethodLike } from './Method';
import { MissingMethod } from './MethodManager';
export interface Handler {
    bind(server: any): void;
}
export interface HandlerConstructor {
    serverTypes: Function[];
    new (service: Service): Handler;
}
export interface Service {
    [name: string]: any;
}
export declare class Service {
    private static readonly handlers;
    private static readonly serverTypes;
    static register(name: string, ctor: HandlerConstructor): void;
    codec: ServiceCodec;
    maxRequestLength: number;
    private readonly invokeManager;
    private readonly ioManager;
    private readonly methodManager;
    private readonly handlers;
    readonly options: {
        [name: string]: any;
    };
    get names(): string[];
    constructor();
    bind(server: any, name?: string): this;
    handle(request: Uint8Array, context: Context): Promise<Uint8Array>;
    process(request: Uint8Array, context: Context): Promise<Uint8Array>;
    execute(name: string, args: any[], context: Context): Promise<any>;
    use(...handlers: InvokeHandler[] | IOHandler[]): this;
    unuse(...handlers: InvokeHandler[] | IOHandler[]): this;
    get(name: string): MethodLike | undefined;
    add(method: MethodLike): this;
    remove(name: string): this;
    addFunction(fn: Function, name?: string, paramTypes?: Function[]): this;
    addFunction(fn: Function, paramTypes: Function[]): this;
    addMethod(method: Function, target: any, name?: string, paramTypes?: Function[]): this;
    addMethod(method: Function, target: any, paramTypes: Function[]): this;
    addMethod(name: string, target: any, paramTypes?: Function[]): this;
    addMissingMethod(fn: MissingMethod, target?: any): this;
    addFunctions(functions: Function[], names?: string[], paramTypes?: Function[]): this;
    addFunctions(functions: Function[], paramTypes: Function[]): this;
    addMethods(methods: Function[], target: any, names?: string[], paramTypes?: Function[]): this;
    addMethods(methods: Function[], target: any, paramTypes: Function[]): this;
    addMethods(names: string[], target: any, paramTypes?: Function[]): this;
    addInstanceMethods(target: any, prefix?: string): this;
}
//# sourceMappingURL=Service.d.ts.map