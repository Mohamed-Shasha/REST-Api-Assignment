"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| Service.ts                                               |
|                                                          |
| Service for TypeScript.                                  |
|                                                          |
| LastModified: Mar 28, 2020                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ServiceCodec_1 = require("./ServiceCodec");
var InvokeManager_1 = require("./InvokeManager");
var IOManager_1 = require("./IOManager");
var Method_1 = require("./Method");
var MethodManager_1 = require("./MethodManager");
var Service = /** @class */ (function () {
    function Service() {
        var _this = this;
        this.codec = ServiceCodec_1.DefaultServiceCodec.instance;
        this.maxRequestLength = 0x7FFFFFFF;
        this.invokeManager = new InvokeManager_1.InvokeManager(this.execute.bind(this));
        this.ioManager = new IOManager_1.IOManager(this.process.bind(this));
        this.methodManager = new MethodManager_1.MethodManager();
        this.handlers = Object.create(null);
        this.options = Object.create(null);
        var _loop_1 = function (name_1) {
            var ctor = Service.handlers[name_1];
            var handler = new ctor(this_1);
            this_1.handlers[name_1] = handler;
            Object.defineProperty(this_1, name_1, {
                get: function () { return handler; },
                set: function (value) {
                    handler = value;
                    _this.handlers[name_1] = value;
                },
                enumerable: true,
                configurable: true
            });
        };
        var this_1 = this;
        for (var name_1 in Service.handlers) {
            _loop_1(name_1);
        }
        this.add(new Method_1.Method(this.methodManager.getNames.bind(this.methodManager), '~'));
    }
    Service.register = function (name, ctor) {
        Service.handlers[name] = ctor;
        ctor.serverTypes.forEach(function (type) {
            if (Service.serverTypes.has(type)) {
                Service.serverTypes.get(type).push(name);
            }
            else {
                Service.serverTypes.set(type, [name]);
            }
        });
    };
    Object.defineProperty(Service.prototype, "names", {
        get: function () {
            return this.methodManager.getNames();
        },
        enumerable: true,
        configurable: true
    });
    Service.prototype.bind = function (server, name) {
        var type = server.constructor;
        var serverTypes = Service.serverTypes;
        if (serverTypes.has(type)) {
            var names = serverTypes.get(type);
            for (var i = 0, n = names.length; i < n; ++i) {
                if ((name === undefined) || (name === names[i])) {
                    this.handlers[names[i]].bind(server);
                }
            }
        }
        else {
            throw new Error('This type server is not supported.');
        }
        return this;
    };
    Service.prototype.handle = function (request, context) {
        return this.ioManager.handler(request, context);
    };
    Service.prototype.process = function (request, context) {
        return __awaiter(this, void 0, void 0, function () {
            var codec, result, _a, name_2, args, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        codec = this.codec;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = codec.decode(request, context), name_2 = _a[0], args = _a[1];
                        return [4 /*yield*/, this.invokeManager.handler(name_2, args, context)];
                    case 2:
                        result = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _b.sent();
                        result = e_1;
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, codec.encode(result, context)];
                }
            });
        });
    };
    Service.prototype.execute = function (name, args, context) {
        return __awaiter(this, void 0, void 0, function () {
            var method, func;
            return __generator(this, function (_a) {
                method = context.method;
                func = method.method;
                if (method.missing) {
                    if (method.passContext) {
                        return [2 /*return*/, func.apply(method.target, [name, args, context])];
                    }
                    return [2 /*return*/, func.apply(method.target, [name, args])];
                }
                if (method.passContext) {
                    args.push(context);
                }
                return [2 /*return*/, func.apply(method.target, args)];
            });
        });
    };
    Service.prototype.use = function () {
        var _a, _b;
        var handlers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            handlers[_i] = arguments[_i];
        }
        if (handlers.length <= 0)
            return this;
        switch (handlers[0].length) {
            case 4:
                (_a = this.invokeManager).use.apply(_a, handlers);
                break;
            case 3:
                (_b = this.ioManager).use.apply(_b, handlers);
                break;
            default: throw new TypeError('Invalid parameter type');
        }
        return this;
    };
    Service.prototype.unuse = function () {
        var _a, _b;
        var handlers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            handlers[_i] = arguments[_i];
        }
        if (handlers.length <= 0)
            return this;
        switch (handlers[0].length) {
            case 4:
                (_a = this.invokeManager).unuse.apply(_a, handlers);
                break;
            case 3:
                (_b = this.ioManager).unuse.apply(_b, handlers);
                break;
            default: throw new TypeError('Invalid parameter type');
        }
        return this;
    };
    Service.prototype.get = function (name) {
        return this.methodManager.get(name);
    };
    Service.prototype.add = function (method) {
        this.methodManager.add(method);
        return this;
    };
    Service.prototype.remove = function (name) {
        this.methodManager.remove(name);
        return this;
    };
    Service.prototype.addFunction = function (fn) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (_a = this.methodManager).addFunction.apply(_a, __spreadArrays([fn], args));
        return this;
    };
    Service.prototype.addMethod = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.methodManager).addMethod.apply(_a, __spreadArrays([args[0], args[1]], args.slice(2)));
        return this;
    };
    Service.prototype.addMissingMethod = function (fn, target) {
        this.methodManager.addMissingMethod(fn, target);
        return this;
    };
    Service.prototype.addFunctions = function (functions) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (_a = this.methodManager).addFunctions.apply(_a, __spreadArrays([functions], args));
        return this;
    };
    Service.prototype.addMethods = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.methodManager).addMethods.apply(_a, __spreadArrays([args[0], args[1]], args.slice(2)));
        return this;
    };
    Service.prototype.addInstanceMethods = function (target, prefix) {
        this.methodManager.addInstanceMethods(target, prefix);
        return this;
    };
    Service.handlers = Object.create(null);
    Service.serverTypes = new Map();
    return Service;
}());
exports.Service = Service;
//# sourceMappingURL=Service.js.map