"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| Client.ts                                                |
|                                                          |
| Client for TypeScript.                                   |
|                                                          |
| LastModified: Mar 28, 2020                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ClientCodec_1 = require("./ClientCodec");
var ClientContext_1 = require("./ClientContext");
var InvokeManager_1 = require("./InvokeManager");
var IOManager_1 = require("./IOManager");
var Utils_1 = require("./Utils");
function makeInvoke(client, name) {
    return function () {
        var args = Array.prototype.slice.call(arguments);
        var context = (args.length > 0 && args[args.length - 1] instanceof ClientContext_1.ClientContext) ? args.pop() : new ClientContext_1.ClientContext();
        return client.invoke(name, args, context);
    };
}
function setMethods(client, service, namespace, name, methods) {
    if (service[name] !== undefined) {
        return;
    }
    service[name] = Object.create(null);
    if (!Array.isArray(methods)) {
        methods = [methods];
    }
    namespace = namespace + name + '_';
    for (var i = 0; i < methods.length; i++) {
        var node = methods[i];
        if (typeof node === 'string') {
            service[name][node] = makeInvoke(client, namespace + node);
        }
        else {
            for (var n in node) {
                setMethods(client, service[name], namespace, n, node[n]);
            }
        }
    }
}
function useService(client, functions) {
    var root = Utils_1.normalize(functions);
    var service = Object.create(null);
    for (var i = 0; i < root.length; i++) {
        var node = root[i];
        if (typeof node === 'string') {
            if (service[node] === undefined) {
                service[node] = makeInvoke(client, node);
            }
        }
        else {
            for (var name_1 in node) {
                setMethods(client, service, '', name_1, node[name_1]);
            }
        }
    }
    return service;
}
var ServiceProxyHandler = /** @class */ (function () {
    function ServiceProxyHandler(client, namespace) {
        this.client = client;
        this.namespace = namespace;
    }
    ServiceProxyHandler.prototype.get = function (target, p, receiver) {
        if (typeof p === 'symbol') {
            return undefined;
        }
        if (p === 'then') {
            return undefined;
        }
        if (!(p in target)) {
            target[p] = new Proxy(function () { }, new ServiceProxyHandler(this.client, this.namespace ? this.namespace + '_' + p : '' + p));
        }
        return target[p];
    };
    ServiceProxyHandler.prototype.apply = function (target, thisArg, args) {
        if (this.namespace) {
            var context = (args.length > 0 && args[args.length - 1] instanceof ClientContext_1.ClientContext) ? args.pop() : new ClientContext_1.ClientContext();
            return this.client.invoke(this.namespace, args, context);
        }
        throw new TypeError("target is not a function");
    };
    return ServiceProxyHandler;
}());
var Client = /** @class */ (function () {
    function Client(uri) {
        var _a;
        var _this = this;
        this.returnTypes = Object.create(null);
        this.requestHeaders = Object.create(null);
        this.codec = ClientCodec_1.DefaultClientCodec.instance;
        this.timeout = 30000;
        this.urilist = [];
        this.transports = Object.create(null);
        this.invokeManager = new InvokeManager_1.InvokeManager(this.call.bind(this));
        this.ioManager = new IOManager_1.IOManager(this.transport.bind(this));
        Client.transports.forEach(function (_a) {
            var name = _a.name, ctor = _a.ctor;
            var transport = new ctor();
            _this.transports[name] = transport;
            Object.defineProperty(_this, name, {
                get: function () { return transport; },
                set: function (value) {
                    transport = value;
                    _this.transports[name] = value;
                },
                enumerable: false,
                configurable: false
            });
        });
        if (uri) {
            if (typeof uri === 'string') {
                this.urilist.push(uri);
            }
            else {
                (_a = this.urilist).push.apply(_a, uri);
            }
        }
    }
    Client.register = function (name, ctor) {
        Client.transports.push({ name: name, ctor: ctor });
        ctor.schemes.forEach(function (scheme) { return Client.protocols[scheme + ':'] = name; });
    };
    Object.defineProperty(Client.prototype, "uris", {
        get: function () {
            return this.urilist;
        },
        set: function (value) {
            if (value.length > 0) {
                this.urilist = value.slice(0);
                this.urilist.sort(function () { return Math.random() - 0.5; });
            }
        },
        enumerable: true,
        configurable: true
    });
    Client.prototype.useService = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var namespace;
        var returnTypes;
        switch (args.length) {
            case 1:
                if (Array.isArray(args[0])) {
                    return useService(this, args[0]);
                }
                else if (typeof args[0] === 'string') {
                    namespace = args[0];
                }
                else {
                    returnTypes = args[0];
                }
                break;
            case 2:
                namespace = args[0];
                returnTypes = args[1];
                break;
        }
        var service = Object.create(null);
        if (returnTypes) {
            for (var name_2 in returnTypes) {
                var fullname = '' + name_2;
                if (namespace) {
                    fullname = namespace + '_' + name_2;
                }
                this.returnTypes[fullname] = returnTypes[name_2];
                service[name_2] = makeInvoke(this, fullname);
            }
            return service;
        }
        return new Proxy(service, new ServiceProxyHandler(this, namespace));
    };
    Client.prototype.useServiceAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var names;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.invoke('~')];
                    case 1:
                        names = _a.sent();
                        return [2 /*return*/, useService(this, names)];
                }
            });
        });
    };
    Client.prototype.use = function () {
        var _a, _b;
        var handlers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            handlers[_i] = arguments[_i];
        }
        if (handlers.length <= 0)
            return this;
        switch (handlers[0].length) {
            case 4:
                (_a = this.invokeManager).use.apply(_a, handlers);
                break;
            case 3:
                (_b = this.ioManager).use.apply(_b, handlers);
                break;
            default: throw new TypeError('Invalid parameter type');
        }
        return this;
    };
    Client.prototype.unuse = function () {
        var _a, _b;
        var handlers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            handlers[_i] = arguments[_i];
        }
        if (handlers.length <= 0)
            return this;
        switch (handlers[0].length) {
            case 4:
                (_a = this.invokeManager).unuse.apply(_a, handlers);
                break;
            case 3:
                (_b = this.ioManager).unuse.apply(_b, handlers);
                break;
            default: throw new TypeError('Invalid parameter type');
        }
        return this;
    };
    Client.prototype.invoke = function (name, args, context) {
        if (args === void 0) { args = []; }
        if (context === void 0) { context = new ClientContext_1.ClientContext(); }
        return __awaiter(this, void 0, void 0, function () {
            var clientContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (args === null) {
                            args = [];
                        }
                        if (!(args.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all(args)];
                    case 1:
                        args = _a.sent();
                        _a.label = 2;
                    case 2:
                        clientContext = (context instanceof ClientContext_1.ClientContext) ? context : new ClientContext_1.ClientContext(context);
                        clientContext.init(this, this.returnTypes[name]);
                        return [2 /*return*/, this.invokeManager.handler(name, args, clientContext)];
                }
            });
        });
    };
    Client.prototype.call = function (name, args, context) {
        return __awaiter(this, void 0, void 0, function () {
            var codec, request, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        codec = this.codec;
                        request = codec.encode(name, args, context);
                        return [4 /*yield*/, this.request(request, context)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, codec.decode(response, context)];
                }
            });
        });
    };
    Client.prototype.request = function (request, context) {
        return this.ioManager.handler(request, context);
    };
    Client.prototype.transport = function (request, context) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, name;
            return __generator(this, function (_a) {
                uri = Utils_1.parseURI(context.uri);
                name = Client.protocols[uri.protocol];
                if (name !== undefined) {
                    return [2 /*return*/, this.transports[name].transport(request, context)];
                }
                throw new Error("The protocol \"" + uri.protocol + "\" is not supported.");
            });
        });
    };
    Client.prototype.abort = function () {
        return __awaiter(this, void 0, void 0, function () {
            var results, name_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        results = [];
                        for (name_3 in this.transports) {
                            results.push(this.transports[name_3].abort());
                        }
                        return [4 /*yield*/, Promise.all(results)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Client.transports = [];
    Client.protocols = Object.create(null);
    return Client;
}());
exports.Client = Client;
//# sourceMappingURL=Client.js.map