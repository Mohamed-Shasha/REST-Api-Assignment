import { Context } from './Context';
import { MethodLike } from './Method';
export declare type MissingMethod1 = (name: string, args: any[]) => any;
export declare type MissingMethod2 = (name: string, args: any[], context: Context) => any;
export declare type MissingMethod = MissingMethod1 | MissingMethod2;
export declare class MethodManager {
    private readonly methods;
    private names;
    getNames(): string[];
    get(name: string): MethodLike | undefined;
    remove(name: string): void;
    add(method: MethodLike): void;
    addFunction(fn: Function, name?: string, paramTypes?: Function[]): void;
    addFunction(fn: Function, paramTypes: Function[]): void;
    addMethod(method: Function, target: any, name?: string, paramTypes?: Function[]): void;
    addMethod(method: Function, target: any, paramTypes: Function[]): void;
    addMethod(name: string, target: any, paramTypes?: Function[]): void;
    addMissingMethod(fn: MissingMethod, target?: any): void;
    addFunctions(functions: Function[], names?: string[], paramTypes?: Function[]): void;
    addFunctions(functions: Function[], paramTypes: Function[]): void;
    addMethods(methods: Function[], target: any, names?: string[], paramTypes?: Function[]): void;
    addMethods(methods: Function[], target: any, paramTypes: Function[]): void;
    addMethods(names: string[], target: any, paramTypes?: Function[]): void;
    addInstanceMethods(target: any, namespace?: string): void;
}
//# sourceMappingURL=MethodManager.d.ts.map