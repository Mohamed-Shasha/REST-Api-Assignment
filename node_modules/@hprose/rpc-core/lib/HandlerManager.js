"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| HandlerManager.ts                                        |
|                                                          |
| HandlerManager for TypeScript.                           |
|                                                          |
| LastModified: Feb 3, 2019                                |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
Object.defineProperty(exports, "__esModule", { value: true });
var HandlerManager = /** @class */ (function () {
    function HandlerManager(defaultHandler) {
        this.defaultHandler = defaultHandler;
        this.handlers = [];
        this.firstHandler = defaultHandler;
    }
    HandlerManager.prototype.rebuildHandler = function () {
        var handlers = this.handlers;
        var next = this.defaultHandler;
        var n = handlers.length;
        for (var i = n - 1; i >= 0; --i) {
            next = this.getNextHandler(handlers[i], next);
        }
        this.firstHandler = next;
    };
    Object.defineProperty(HandlerManager.prototype, "handler", {
        get: function () {
            return this.firstHandler;
        },
        enumerable: true,
        configurable: true
    });
    HandlerManager.prototype.use = function () {
        var _a;
        var handlers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            handlers[_i] = arguments[_i];
        }
        (_a = this.handlers).push.apply(_a, handlers);
        this.rebuildHandler();
    };
    HandlerManager.prototype.unuse = function () {
        var handlers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            handlers[_i] = arguments[_i];
        }
        var rebuild = false;
        for (var i = 0, n = handlers.length; i < n; ++i) {
            var index = this.handlers.indexOf(handlers[i]);
            if (index >= 0) {
                this.handlers.splice(index, 1);
                rebuild = true;
            }
        }
        if (rebuild)
            this.rebuildHandler();
    };
    return HandlerManager;
}());
exports.HandlerManager = HandlerManager;
//# sourceMappingURL=HandlerManager.js.map