"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| HttpHandler.ts                                           |
|                                                          |
| HttpHandler for TypeScript.                              |
|                                                          |
| LastModified: Jun 14, 2021                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpHandler = void 0;
var http = __importStar(require("http"));
var https = __importStar(require("https"));
var net_1 = require("net");
var fs = __importStar(require("fs"));
var rpc_core_1 = require("@hprose/rpc-core");
var io_1 = require("@hprose/io");
var lastModified = (new Date()).toUTCString();
var etag = '"' + Math.floor(Math.random() * 2147483647).toString(16) +
    ':' + Math.floor(Math.random() * 2147483647).toString(16) + '"';
var HttpHandler = /** @class */ (function () {
    function HttpHandler(service) {
        var _this = this;
        this.service = service;
        this.p3p = true;
        this.get = true;
        this.crossDomain = true;
        this.timeout = 30000;
        this.httpHeaders = Object.create(null);
        this.origins = Object.create(null);
        this.originCount = 0;
        this._crossDomainXmlFile = '';
        this._crossDomainXmlContent = Buffer.alloc(0);
        this._clientAccessPolicyXmlFile = '';
        this._clientAccessPolicyXmlContent = Buffer.alloc(0);
        this.handler = function (request, response) { return __awaiter(_this, void 0, void 0, function () {
            var context, size;
            var _this = this;
            return __generator(this, function (_a) {
                context = new rpc_core_1.ServiceContext(this.service);
                context.request = request;
                context.response = response;
                context.remoteAddress = {
                    'family': request.socket.remoteFamily,
                    'address': request.socket.remoteAddress,
                    'port': request.socket.remotePort
                };
                context.localAddress = {
                    'family': net_1.isIPv6(request.socket.localAddress) ? 'IPv6' : 'IPv4',
                    'address': request.socket.localAddress,
                    'port': request.socket.localPort
                };
                context.handler = this;
                context['httpRequestHeaders'] = request.headers;
                size = Number(request.headers['content-length']);
                if (size > this.service.maxRequestLength) {
                    response.statusCode = 413;
                    response.statusMessage = 'Request Entity Too Large';
                    response.end();
                    return [2 /*return*/, Promise.resolve()];
                }
                if (this.timeout > 0) {
                    request.setTimeout(this.timeout, function () {
                        request.destroy(new rpc_core_1.TimeoutError());
                    });
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var instream = size ? new io_1.ByteStream(size) : new io_1.ByteStream();
                        var ondata = function (chunk) {
                            if (instream.length + chunk.length > size) {
                                request.off('data', ondata);
                                response.statusCode = 413;
                                response.statusMessage = 'Request Entity Too Large';
                                response.end();
                                return resolve();
                            }
                            instream.write(new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.length));
                        };
                        request.on('data', ondata);
                        request.on('end', function () { return __awaiter(_this, void 0, void 0, function () {
                            var result;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (request.method === 'GET') {
                                            if (this._clientAccessPolicyXmlContent.length > 0
                                                && this.clientAccessPolicyXmlHandler(request, response)) {
                                                return [2 /*return*/, resolve()];
                                            }
                                            if (this._crossDomainXmlContent.length > 0
                                                && this.crossDomainXmlHandler(request, response)) {
                                                return [2 /*return*/, resolve()];
                                            }
                                            if (!this.get) {
                                                response.statusCode = 403;
                                                response.statusMessage = 'Forbidden';
                                                return [2 /*return*/, resolve()];
                                            }
                                        }
                                        return [4 /*yield*/, this.service.handle(instream.takeBytes(), context)];
                                    case 1:
                                        result = _a.sent();
                                        try {
                                            this.sendHeader(request, response, context);
                                        }
                                        catch (e) {
                                            return [2 /*return*/, reject(e)];
                                        }
                                        this.end(result, response);
                                        resolve();
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        request.on('error', function (error) {
                            if (_this.onerror)
                                _this.onerror(error);
                            reject(error);
                        });
                        request.on('close', function () {
                            if (_this.onclose)
                                _this.onclose(request);
                        });
                    })];
            });
        }); };
    }
    HttpHandler.prototype.bind = function (server) {
        var _this = this;
        server.on('request', this.handler);
        server.on('error', function (error) {
            if (_this.onerror)
                _this.onerror(error);
        });
    };
    HttpHandler.prototype.crossDomainXmlHandler = function (request, response) {
        if (request.url && request.url.toLowerCase().endsWith('/crossdomain.xml')) {
            if (request.headers['if-modified-since'] === lastModified &&
                request.headers['if-none-match'] === etag) {
                response.statusCode = 304;
            }
            else {
                response.setHeader('Last-Modified', lastModified);
                response.setHeader('Etag', etag);
                response.setHeader('Content-Type', 'text/xml');
                response.setHeader('Content-Length', this._crossDomainXmlContent.length);
                response.write(this._crossDomainXmlContent);
            }
            response.end();
            return true;
        }
        return false;
    };
    HttpHandler.prototype.clientAccessPolicyXmlHandler = function (request, response) {
        if (request.url && request.url.toLowerCase().endsWith('/clientaccesspolicy.xml')) {
            if (request.headers['if-modified-since'] === lastModified &&
                request.headers['if-none-match'] === etag) {
                response.statusCode = 304;
            }
            else {
                response.setHeader('Last-Modified', lastModified);
                response.setHeader('Etag', etag);
                response.setHeader('Content-Type', 'text/xml');
                response.setHeader('Content-Length', this._clientAccessPolicyXmlContent.length);
                response.write(this._clientAccessPolicyXmlContent);
            }
            response.end();
            return true;
        }
        return false;
    };
    HttpHandler.prototype.setHeader = function (response, headers) {
        if (headers) {
            for (var name_1 in headers) {
                var value = headers[name_1];
                if (value !== undefined) {
                    response.setHeader(name_1, value);
                }
            }
        }
    };
    HttpHandler.prototype.sendHeader = function (request, response, context) {
        if ('httpStatusCode' in context) {
            response.statusCode = Number(context['httpStatusCode']);
        }
        else {
            response.statusCode = 200;
        }
        response.setHeader('Content-Type', 'text/plain');
        if (this.p3p) {
            response.setHeader('P3P', 'CP="CAO DSP COR CUR ADM DEV TAI PSA PSD IVAi IVDi ' +
                'CONi TELo OTPi OUR DELi SAMi OTRi UNRi PUBi IND PHY ONL ' +
                'UNI PUR FIN COM NAV INT DEM CNT STA POL HEA PRE GOV"');
        }
        if (this.crossDomain) {
            var origin_1 = request.headers['origin'];
            if (typeof origin_1 === 'string' && origin_1 !== 'null') {
                if (this.originCount === 0 || this.origins[origin_1]) {
                    response.setHeader('Access-Control-Allow-Origin', origin_1);
                    response.setHeader('Access-Control-Allow-Credentials', 'true');
                }
            }
            else {
                response.setHeader('Access-Control-Allow-Origin', '*');
            }
        }
        this.setHeader(response, this.httpHeaders);
        this.setHeader(response, context['httpResponseHeaders']);
    };
    HttpHandler.prototype.end = function (data, response) {
        response.setHeader('Content-Length', data.length);
        response.end(Buffer.from(data.buffer, data.byteOffset, data.length));
    };
    HttpHandler.prototype.addAccessControlAllowOrigin = function (origin) {
        if (!this.origins[origin]) {
            this.origins[origin] = true;
            this.originCount++;
        }
    };
    HttpHandler.prototype.removeAccessControlAllowOrigin = function (origin) {
        if (this.origins[origin]) {
            delete this.origins[origin];
            this.originCount--;
        }
    };
    Object.defineProperty(HttpHandler.prototype, "crossDomainXmlFile", {
        get: function () {
            return this._crossDomainXmlFile;
        },
        set: function (value) {
            this._crossDomainXmlFile = value;
            this._crossDomainXmlContent = fs.readFileSync(this._crossDomainXmlFile);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HttpHandler.prototype, "crossDomainXmlContent", {
        get: function () {
            return this._crossDomainXmlContent;
        },
        set: function (value) {
            this._crossDomainXmlFile = '';
            this._crossDomainXmlContent = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HttpHandler.prototype, "clientAccessPolicyXmlFile", {
        get: function () {
            return this._clientAccessPolicyXmlFile;
        },
        set: function (value) {
            this._clientAccessPolicyXmlFile = value;
            this._clientAccessPolicyXmlContent = fs.readFileSync(this._clientAccessPolicyXmlFile);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HttpHandler.prototype, "clientAccessPolicyXmlContent", {
        get: function () {
            return this._clientAccessPolicyXmlContent;
        },
        set: function (value) {
            this._clientAccessPolicyXmlFile = '';
            this._clientAccessPolicyXmlContent = value;
        },
        enumerable: false,
        configurable: true
    });
    HttpHandler.serverTypes = [http.Server, https.Server];
    return HttpHandler;
}());
exports.HttpHandler = HttpHandler;
rpc_core_1.Service.register('http', HttpHandler);
//# sourceMappingURL=HttpHandler.js.map