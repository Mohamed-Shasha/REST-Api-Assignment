"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| SocketHandler.ts                                         |
|                                                          |
| SocketHandler for TypeScript.                            |
|                                                          |
| LastModified: Dec 17, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketHandler = void 0;
var net = __importStar(require("net"));
var io_1 = require("@hprose/io");
var rpc_core_1 = require("@hprose/rpc-core");
var SocketHandler = /** @class */ (function () {
    function SocketHandler(service) {
        var _this = this;
        this.service = service;
        this.handler = function (socket) {
            socket.unref();
            try {
                if (_this.onaccept)
                    _this.onaccept(socket);
            }
            catch (e) {
                socket.destroy(e);
                return;
            }
            socket.on('close', function () {
                if (_this.onclose)
                    _this.onclose(socket);
            });
            socket.on('error', function (error) {
                if (_this.onerror)
                    _this.onerror(error);
            });
            _this.receive(socket);
        };
    }
    SocketHandler.prototype.bind = function (server) {
        var _this = this;
        server.on('connection', this.handler);
        server.on('error', function (error) {
            if (_this.onerror)
                _this.onerror(error);
        });
    };
    SocketHandler.prototype.send = function (socket, response, index) {
        var n = response.length;
        var header = Buffer.allocUnsafe(12);
        header.writeInt32BE(n | 0x80000000, 4);
        header.writeInt32BE(index, 8);
        var crc = rpc_core_1.crc32(header.subarray(4, 12));
        header.writeInt32BE(crc, 0);
        socket.write(header);
        socket.write(Buffer.from(response.buffer, response.byteOffset, response.length));
    };
    SocketHandler.prototype.run = function (socket, request, index) {
        return __awaiter(this, void 0, void 0, function () {
            var context, response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = new rpc_core_1.ServiceContext(this.service);
                        context.socket = socket;
                        context.remoteAddress = {
                            'family': socket.remoteFamily,
                            'address': socket.remoteAddress,
                            'port': socket.remotePort
                        };
                        context.localAddress = {
                            'family': net.isIPv6(socket.localAddress) ? 'IPv6' : 'IPv4',
                            'address': socket.localAddress,
                            'port': socket.localPort
                        };
                        context.handler = this;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.service.handle(request, context)];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        index |= 0x80000000;
                        response = (new io_1.ByteStream(e_1.message)).bytes;
                        return [3 /*break*/, 4];
                    case 4:
                        this.send(socket, response, index);
                        return [2 /*return*/];
                }
            });
        });
    };
    SocketHandler.prototype.receive = function (socket) {
        var _this = this;
        var instream = new io_1.ByteStream();
        var headerLength = 12;
        var bodyLength = -1;
        var index = 0;
        var ondata = function (data) {
            var chunk = new Uint8Array(data.buffer, data.byteOffset, data.length);
            instream.write(chunk);
            while (true) {
                if ((bodyLength < 0) && (instream.length >= headerLength)) {
                    var crc = instream.readInt32BE();
                    instream.mark();
                    var header = instream.read(8);
                    if (rpc_core_1.crc32(header) !== crc || (header[0] & 0x80) === 0 || (header[4] & 0x80) !== 0) {
                        socket.removeListener('data', ondata);
                        socket.destroy(new Error('Invalid request'));
                        return;
                    }
                    instream.reset();
                    bodyLength = instream.readInt32BE() & 0x7FFFFFFF;
                    index = instream.readInt32BE();
                    if (bodyLength > _this.service.maxRequestLength) {
                        socket.removeListener('data', ondata);
                        _this.send(socket, (new io_1.ByteStream('Request entity too large')).bytes, index | 0x80000000);
                        socket.end();
                        return;
                    }
                }
                if ((bodyLength >= 0) && ((instream.length - headerLength) >= bodyLength)) {
                    var request = instream.read(bodyLength);
                    instream.trunc();
                    bodyLength = -1;
                    _this.run(socket, request, index);
                }
                else {
                    break;
                }
            }
        };
        socket.on('data', ondata);
    };
    SocketHandler.serverTypes = [net.Server];
    return SocketHandler;
}());
exports.SocketHandler = SocketHandler;
rpc_core_1.Service.register('socket', SocketHandler);
//# sourceMappingURL=SocketHandler.js.map