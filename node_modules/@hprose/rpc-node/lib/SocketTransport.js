"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| SocketTransport.ts                                       |
|                                                          |
| SocketTransport for TypeScript.                          |
|                                                          |
| LastModified: Dec 18, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocketTransport = void 0;
var net = __importStar(require("net"));
var tls = __importStar(require("tls"));
var url_1 = require("url");
var io_1 = require("@hprose/io");
var rpc_core_1 = require("@hprose/rpc-core");
var SocketTransport = /** @class */ (function () {
    function SocketTransport() {
        this.counter = 0;
        this.results = new Map();
        this.sockets = Object.create(null);
        this.noDelay = true;
        this.keepAlive = true;
        this.options = Object.create(null);
    }
    SocketTransport.prototype.connect = function (uri) {
        var _a;
        var parser = url_1.parse(uri);
        var protocol = parser.protocol;
        switch (protocol) {
            case 'tcp:':
            case 'tcp4:':
            case 'tcp6:':
            case 'tls:':
            case 'tls4:':
            case 'tls6:':
            case 'ssl:':
            case 'ssl4:':
            case 'ssl6:': {
                var options = Object.create(null);
                options.host = (_a = parser.hostname) !== null && _a !== void 0 ? _a : undefined;
                options.port = parser.port ? parseInt(parser.port, 10) : 8412;
                switch (protocol) {
                    case 'tcp4:':
                    case 'tls4:':
                    case 'ssl4:': {
                        options.family = 4;
                        break;
                    }
                    case 'tcp6:':
                    case 'tls6:':
                    case 'ssl6:': {
                        options.family = 6;
                        break;
                    }
                }
                switch (protocol) {
                    case 'tcp:':
                    case 'tcp4:':
                    case 'tcp6:': {
                        return net.connect(options);
                    }
                    default: {
                        var tlsOptions = options;
                        for (var key in this.options) {
                            if (!this.options.hasOwnProperty || this.options.hasOwnProperty(key)) {
                                tlsOptions[key] = this.options[key];
                            }
                        }
                        return tls.connect(tlsOptions);
                    }
                }
            }
            case 'unix:': {
                var options = Object.create(null);
                if (parser.path) {
                    options.path = parser.path;
                }
                else {
                    throw new Error('invalid unix path');
                }
                return net.connect(options);
            }
            default:
                throw new Error('unsupported ' + protocol + ' protocol');
        }
    };
    SocketTransport.prototype.receive = function (uri, socket) {
        var _this = this;
        var instream = new io_1.ByteStream();
        var headerLength = 12;
        var bodyLength = -1;
        var index = 0;
        var ondata = function (data) {
            var chunk = new Uint8Array(data.buffer, data.byteOffset, data.length);
            instream.write(chunk);
            while (true) {
                if ((bodyLength < 0) && (instream.length >= headerLength)) {
                    var crc = instream.readInt32BE();
                    instream.mark();
                    var header = instream.read(8);
                    if (rpc_core_1.crc32(header) !== crc || (header[0] & 0x80) === 0) {
                        socket.removeListener('data', ondata);
                        socket.destroy(new Error('invalid response'));
                        return;
                    }
                    instream.reset();
                    bodyLength = instream.readInt32BE() & 0x7FFFFFFF;
                    index = instream.readInt32BE();
                }
                if ((bodyLength >= 0) && ((instream.length - headerLength) >= bodyLength)) {
                    var response = instream.read(bodyLength);
                    instream.trunc();
                    bodyLength = -1;
                    var has_error = (index & 0x80000000) !== 0;
                    index &= 0x7FFFFFFF;
                    var results = _this.results.get(socket);
                    if (results) {
                        var result = results[index];
                        delete results[index];
                        if (has_error) {
                            if (result) {
                                result.reject(new Error(io_1.fromUint8Array(response)));
                            }
                            socket.removeListener('data', ondata);
                            socket.end();
                            return;
                        }
                        else if (result) {
                            result.resolve(response);
                        }
                    }
                }
                else {
                    break;
                }
            }
        };
        socket.on('data', ondata);
    };
    SocketTransport.prototype.getSocket = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var socket, conn, onerror;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sockets[uri]];
                    case 1:
                        socket = _a.sent();
                        if (socket !== undefined && !socket.destroyed) {
                            return [2 /*return*/, socket];
                        }
                        conn = rpc_core_1.defer();
                        socket = this.connect(uri);
                        socket.unref();
                        socket.setNoDelay(this.noDelay);
                        socket.setKeepAlive(this.keepAlive);
                        socket.on('connect', function () {
                            conn.resolve(socket);
                        });
                        this.receive(uri, socket);
                        onerror = function (error) { return __awaiter(_this, void 0, void 0, function () {
                            var results, index, result;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        results = this.results.get(socket);
                                        if (results) {
                                            for (index in results) {
                                                result = results[index];
                                                result.reject(error);
                                                delete results[index];
                                            }
                                        }
                                        return [4 /*yield*/, this.sockets[uri]];
                                    case 1:
                                        if (!((_a.sent()) === socket)) return [3 /*break*/, 3];
                                        return [4 /*yield*/, this.sockets[uri]];
                                    case 2:
                                        (_a.sent()).destroy();
                                        delete this.sockets[uri];
                                        _a.label = 3;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); };
                        socket.on('error', onerror);
                        socket.on('close', function (had_error) {
                            if (had_error)
                                return;
                            onerror(new Error('connection closed'));
                        });
                        this.sockets[uri] = conn.promise;
                        return [2 /*return*/, conn.promise];
                }
            });
        });
    };
    SocketTransport.prototype.transport = function (request, context) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, index, result, socket, results, timeoutId_1, n, header, crc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uri = context.uri;
                        index = (this.counter < 0x7FFFFFFF) ? ++this.counter : this.counter = 0;
                        result = rpc_core_1.defer();
                        return [4 /*yield*/, this.getSocket(uri)];
                    case 1:
                        socket = _a.sent();
                        if (this.results.get(socket) === undefined) {
                            this.results.set(socket, Object.create(null));
                        }
                        results = this.results.get(socket);
                        results[index] = result;
                        if (context.timeout > 0) {
                            timeoutId_1 = setTimeout(function () {
                                delete results[index];
                                result.reject(new rpc_core_1.TimeoutError());
                            }, context.timeout);
                            result.promise.then(function () {
                                clearTimeout(timeoutId_1);
                            }, function () {
                                clearTimeout(timeoutId_1);
                            });
                        }
                        n = request.length;
                        header = Buffer.allocUnsafe(12);
                        header.writeInt32BE(n | 0x80000000, 4);
                        header.writeInt32BE(index, 8);
                        crc = rpc_core_1.crc32(header.subarray(4, 12));
                        header.writeInt32BE(crc, 0);
                        socket.write(header);
                        socket.write(Buffer.from(request.buffer, request.byteOffset, request.length));
                        return [2 /*return*/, result.promise];
                }
            });
        });
    };
    SocketTransport.prototype.abort = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _i, uri, socket;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = [];
                        for (_b in this.sockets)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        uri = _a[_i];
                        socket = this.sockets[uri];
                        delete this.sockets[uri];
                        if (!socket) return [3 /*break*/, 3];
                        return [4 /*yield*/, socket];
                    case 2:
                        (_c.sent()).end();
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SocketTransport.schemes = ['tcp', 'tcp4', 'tcp6', 'tls', 'tls4', 'tls6', 'ssl', 'ssl4', 'ssl6', 'unix'];
    return SocketTransport;
}());
exports.SocketTransport = SocketTransport;
rpc_core_1.Client.register('socket', SocketTransport);
//# sourceMappingURL=SocketTransport.js.map