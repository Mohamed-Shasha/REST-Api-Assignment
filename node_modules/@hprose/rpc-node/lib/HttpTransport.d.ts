/// <reference types="node" />
import * as http from 'http';
import * as https from 'https';
import { ClientContext, Context, Transport } from '@hprose/rpc-core';
export interface HttpClientContext extends ClientContext {
    httpStatusCode?: number;
    httpStatusText?: string;
    httpRequestHeaders?: {
        [header: string]: number | string | string[] | undefined;
    };
    httpResponseHeaders?: {
        [name: string]: string | string[] | undefined;
    };
}
export declare class HttpTransport implements Transport {
    static readonly schemes: string[];
    private counter;
    private requests;
    keepAlive: boolean;
    httpAgent: http.Agent;
    httpsAgent: https.Agent;
    options: https.RequestOptions;
    readonly httpRequestHeaders: http.OutgoingHttpHeaders;
    private getRequestHeader;
    transport(request: Uint8Array, context: Context): Promise<Uint8Array>;
    abort(): Promise<void>;
}
declare module '@hprose/rpc-core' {
    interface HttpTransport {
        keepAlive: boolean;
        httpAgent: http.Agent;
        httpsAgent: https.Agent;
        options: https.RequestOptions;
        readonly httpRequestHeaders: {
            [header: string]: number | string | string[] | undefined;
        };
        transport(request: Uint8Array, context: Context): Promise<Uint8Array>;
        abort(): Promise<void>;
    }
    interface Client {
        http: HttpTransport;
    }
}
//# sourceMappingURL=HttpTransport.d.ts.map