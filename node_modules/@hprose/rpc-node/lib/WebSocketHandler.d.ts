/// <reference types="node" />
import WebSocket from 'ws';
import * as http from 'http';
import * as https from 'https';
import { Service, ServiceContext, Handler } from '@hprose/rpc-core';
export interface WebSocketServiceContext extends ServiceContext {
    websocket: WebSocket;
    request: http.IncomingMessage;
    handler: WebSocketHandler;
}
export declare class WebSocketHandler implements Handler {
    readonly service: Service;
    static serverTypes: Function[];
    compress: boolean;
    onaccept?: (websocket: WebSocket, request: http.IncomingMessage) => void;
    onclose?: (websocket: WebSocket, request: http.IncomingMessage) => void;
    onerror?: (error: Error) => void;
    constructor(service: Service);
    bind(server: http.Server | https.Server | WebSocket.Server): void;
    handler: (websocket: WebSocket, request: http.IncomingMessage) => void;
}
declare module '@hprose/rpc-core' {
    interface WebSocketHandler {
        compress: boolean;
        onaccept?: (websocket: WebSocket) => void;
        onclose?: (websocket: WebSocket) => void;
        onerror?: (error: Error) => void;
        bind(server: http.Server | https.Server | WebSocket.Server): void;
        handler(websocket: WebSocket, request: http.IncomingMessage): void;
    }
    interface Service {
        websocket: WebSocketHandler;
    }
}
//# sourceMappingURL=WebSocketHandler.d.ts.map