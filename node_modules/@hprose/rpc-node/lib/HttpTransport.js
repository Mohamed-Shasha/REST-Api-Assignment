"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| HttpTransport.ts                                         |
|                                                          |
| HttpTransport for TypeScript.                            |
|                                                          |
| LastModified: Dec 17, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpTransport = void 0;
var url_1 = require("url");
var http = __importStar(require("http"));
var https = __importStar(require("https"));
var rpc_core_1 = require("@hprose/rpc-core");
var io_1 = require("@hprose/io");
var HttpTransport = /** @class */ (function () {
    function HttpTransport() {
        this.counter = 0;
        this.requests = Object.create(null);
        this.keepAlive = true;
        this.httpAgent = new http.Agent({ keepAlive: true });
        this.httpsAgent = new https.Agent({ keepAlive: true });
        this.options = Object.create(null);
        this.httpRequestHeaders = Object.create(null);
    }
    HttpTransport.prototype.getRequestHeader = function (httpRequestHeaders) {
        var headers = Object.create(null);
        for (var name_1 in this.httpRequestHeaders) {
            headers[name_1] = this.httpRequestHeaders[name_1];
        }
        if (httpRequestHeaders) {
            for (var name_2 in httpRequestHeaders) {
                headers[name_2] = httpRequestHeaders[name_2];
            }
        }
        return headers;
    };
    HttpTransport.prototype.transport = function (request, context) {
        return __awaiter(this, void 0, void 0, function () {
            var options, client, secure, key, httpContext, cookie;
            var _this = this;
            return __generator(this, function (_a) {
                options = url_1.parse(context.uri);
                switch (options.protocol) {
                    case 'http:':
                        client = http;
                        secure = false;
                        options.agent = this.httpAgent;
                        break;
                    case 'https:':
                        client = https;
                        secure = true;
                        options.agent = this.httpsAgent;
                        break;
                    default:
                        throw new Error('unsupported ' + options.protocol + 'protocol');
                }
                for (key in this.options) {
                    if (!this.options.hasOwnProperty || this.options.hasOwnProperty(key)) {
                        options[key] = this.options[key];
                    }
                }
                httpContext = context;
                options.method = 'POST';
                options.headers = this.getRequestHeader(httpContext.httpRequestHeaders);
                options.headers['Content-Length'] = request.length;
                cookie = rpc_core_1.getCookie(options.host, options.path, secure);
                if (cookie) {
                    options.headers['Cookie'] = cookie;
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var index = _this.counter++;
                        var req = client.request(options, function (res) {
                            var size = res.headers['content-length'];
                            var instream = size ? new io_1.ByteStream(parseInt(size, 10)) : new io_1.ByteStream();
                            res.on('data', function (chunk) {
                                instream.write(new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.length));
                            });
                            res.on('end', function () {
                                delete _this.requests[index];
                                httpContext.httpStatusCode = res.statusCode;
                                httpContext.httpStatusText = res.statusMessage;
                                if (res.statusCode) {
                                    if (res.statusCode >= 200 && res.statusCode < 300) {
                                        httpContext.httpResponseHeaders = res.headers;
                                        rpc_core_1.setCookie(res.headers, options.host);
                                        resolve(instream.takeBytes());
                                    }
                                    else {
                                        reject(new Error(res.statusCode + ':' + res.statusMessage));
                                        req.socket.end();
                                    }
                                }
                                else {
                                    reject(new Error(instream.toString()));
                                    req.socket.end();
                                }
                            });
                            res.on('error', function (err) {
                                delete _this.requests[index];
                                reject(err);
                            });
                        });
                        _this.requests[index] = req;
                        req.shouldKeepAlive = _this.keepAlive;
                        req.setTimeout(context.timeout, function () {
                            delete _this.requests[index];
                            reject(new rpc_core_1.TimeoutError());
                            req.abort();
                        });
                        req.on('error', function (err) {
                            delete _this.requests[index];
                            reject(err);
                        });
                        req.on('abort', function () {
                            delete _this.requests[index];
                            reject(new Error('transport abort'));
                        });
                        req.end(Buffer.from(request.buffer, 0, request.length));
                    })];
            });
        });
    };
    HttpTransport.prototype.abort = function () {
        return __awaiter(this, void 0, void 0, function () {
            var index, request;
            return __generator(this, function (_a) {
                for (index in this.requests) {
                    request = this.requests[index];
                    delete this.requests[index];
                    if (request) {
                        request.abort();
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    HttpTransport.schemes = ['http', 'https'];
    return HttpTransport;
}());
exports.HttpTransport = HttpTransport;
rpc_core_1.Client.register('http', HttpTransport);
//# sourceMappingURL=HttpTransport.js.map