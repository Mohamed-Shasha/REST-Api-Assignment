/// <reference types="node" />
import * as net from 'net';
import { ServiceContext, Service, Handler } from '@hprose/rpc-core';
export interface SocketServiceContext extends ServiceContext {
    readonly socket: net.Socket;
    readonly handler: SocketHandler;
}
export declare class SocketHandler implements Handler {
    readonly service: Service;
    static serverTypes: Function[];
    onaccept?: (socket: net.Socket) => void;
    onclose?: (socket: net.Socket) => void;
    onerror?: (error: Error) => void;
    constructor(service: Service);
    bind(server: net.Server): void;
    private send;
    private run;
    private receive;
    handler: (socket: net.Socket) => void;
}
declare module '@hprose/rpc-core' {
    interface SocketHandler {
        onaccept?: (socket: net.Socket) => void;
        onclose?: (socket: net.Socket) => void;
        onerror?: (error: Error) => void;
        bind(server: net.Server): void;
        handler(socket: net.Socket): void;
    }
    interface Service {
        socket: SocketHandler;
    }
}
//# sourceMappingURL=SocketHandler.d.ts.map