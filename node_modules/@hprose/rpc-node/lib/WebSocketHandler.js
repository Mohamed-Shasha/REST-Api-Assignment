"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| WebSocketHandler.ts                                      |
|                                                          |
| WebSocketHandler for TypeScript.                         |
|                                                          |
| LastModified: Dec 17, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketHandler = void 0;
var ws_1 = __importDefault(require("ws"));
var http = __importStar(require("http"));
var https = __importStar(require("https"));
var net_1 = require("net");
var rpc_core_1 = require("@hprose/rpc-core");
var io_1 = require("@hprose/io");
var WebSocketHandler = /** @class */ (function () {
    function WebSocketHandler(service) {
        var _this = this;
        this.service = service;
        this.compress = false;
        this.handler = function (websocket, request) {
            try {
                websocket.protocol = 'hprose';
                websocket.binaryType = 'arraybuffer';
                if (_this.onaccept)
                    _this.onaccept(websocket, request);
            }
            catch (_a) {
                websocket.terminate();
                return;
            }
            websocket.on('close', function () {
                if (_this.onclose)
                    _this.onclose(websocket, request);
            });
            websocket.on('error', function (error) {
                if (_this.onerror)
                    _this.onerror(error);
            });
            websocket.on('message', function (data) { return __awaiter(_this, void 0, void 0, function () {
                var instream, index, context, response, e_1, header;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            instream = new io_1.ByteStream(data);
                            index = instream.readInt32BE();
                            context = new rpc_core_1.ServiceContext(this.service);
                            context.websocket = websocket;
                            context.request = request;
                            context.remoteAddress = {
                                'family': request.socket.remoteFamily,
                                'address': request.socket.remoteAddress,
                                'port': request.socket.remotePort
                            };
                            context.localAddress = {
                                'family': net_1.isIPv6(request.socket.localAddress) ? 'IPv6' : 'IPv4',
                                'address': request.socket.localAddress,
                                'port': request.socket.localPort
                            };
                            context.handler = this;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.service.handle(instream.remains, context)];
                        case 2:
                            response = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            index |= 0x80000000;
                            response = (new io_1.ByteStream(e_1.message)).bytes;
                            return [3 /*break*/, 4];
                        case 4:
                            header = new Uint8Array(4);
                            io_1.writeInt32BE(header, 0, index);
                            websocket.send(header, {
                                binary: true,
                                compress: this.compress,
                                fin: false
                            }, function (error) {
                                if (error) {
                                    if (_this.onerror)
                                        _this.onerror(error);
                                }
                            });
                            websocket.send(response, {
                                binary: true,
                                compress: this.compress,
                            }, function (error) {
                                if (error) {
                                    if (_this.onerror)
                                        _this.onerror(error);
                                }
                            });
                            return [2 /*return*/];
                    }
                });
            }); });
        };
    }
    WebSocketHandler.prototype.bind = function (server) {
        var _this = this;
        if (server instanceof http.Server || server instanceof https.Server) {
            server = new ws_1.default.Server({ server: server });
        }
        server.options.perMessageDeflate = false;
        server.options.maxPayload = this.service.maxRequestLength + 4;
        server.on('connection', this.handler);
        server.on('error', function (error) {
            if (_this.onerror)
                _this.onerror(error);
        });
    };
    WebSocketHandler.serverTypes = [http.Server, https.Server, ws_1.default.Server];
    return WebSocketHandler;
}());
exports.WebSocketHandler = WebSocketHandler;
rpc_core_1.Service.register('websocket', WebSocketHandler);
//# sourceMappingURL=WebSocketHandler.js.map