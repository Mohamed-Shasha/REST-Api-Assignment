/// <reference types="node" />
import * as http from 'http';
import * as https from 'https';
import { Service, ServiceContext, Handler } from '@hprose/rpc-core';
export interface HttpServiceContext extends ServiceContext {
    readonly request: http.IncomingMessage;
    readonly response: http.ServerResponse;
    readonly handler: HttpHandler;
}
export declare class HttpHandler implements Handler {
    readonly service: Service;
    static serverTypes: Function[];
    p3p: boolean;
    get: boolean;
    crossDomain: boolean;
    timeout: number;
    httpHeaders: http.OutgoingHttpHeaders;
    private origins;
    private originCount;
    private _crossDomainXmlFile;
    private _crossDomainXmlContent;
    private _clientAccessPolicyXmlFile;
    private _clientAccessPolicyXmlContent;
    onclose?: (request: http.IncomingMessage) => void;
    onerror?: (error: Error) => void;
    constructor(service: Service);
    bind(server: http.Server | https.Server): void;
    protected crossDomainXmlHandler(request: http.IncomingMessage, response: http.ServerResponse): boolean;
    protected clientAccessPolicyXmlHandler(request: http.IncomingMessage, response: http.ServerResponse): boolean;
    private setHeader;
    protected sendHeader(request: http.IncomingMessage, response: http.ServerResponse, context: ServiceContext): void;
    protected end(data: Uint8Array, response: http.ServerResponse): void;
    addAccessControlAllowOrigin(origin: string): void;
    removeAccessControlAllowOrigin(origin: string): void;
    get crossDomainXmlFile(): string;
    set crossDomainXmlFile(value: string);
    get crossDomainXmlContent(): Buffer;
    set crossDomainXmlContent(value: Buffer);
    get clientAccessPolicyXmlFile(): string;
    set clientAccessPolicyXmlFile(value: string);
    get clientAccessPolicyXmlContent(): Buffer;
    set clientAccessPolicyXmlContent(value: Buffer);
    handler: (request: http.IncomingMessage, response: http.ServerResponse) => Promise<void>;
}
declare module '@hprose/rpc-core' {
    interface HttpHandler {
        p3p: boolean;
        get: boolean;
        crossDomain: boolean;
        crossDomainXmlFile: string;
        crossDomainXmlContent: Buffer;
        clientAccessPolicyXmlFile: string;
        clientAccessPolicyXmlContent: Buffer;
        onclose?: (request: http.IncomingMessage) => void;
        onerror?: (error: Error) => void;
        bind(server: http.Server | https.Server): void;
        addAccessControlAllowOrigin(origin: string): void;
        removeAccessControlAllowOrigin(origin: string): void;
        handler(request: http.IncomingMessage, response: http.ServerResponse): Promise<void>;
    }
    interface Service {
        http: HttpHandler;
    }
}
//# sourceMappingURL=HttpHandler.d.ts.map