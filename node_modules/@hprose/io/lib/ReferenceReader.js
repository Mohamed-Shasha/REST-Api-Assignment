"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| ReferenceReader.ts                                       |
|                                                          |
| hprose reference reader for TypeScript.                  |
|                                                          |
| LastModified: Jan 6, 2019                                |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ValueReader = __importStar(require("./ValueReader"));
function readBytes(reader) {
    var result = ValueReader.readBytes(reader.stream);
    reader.addReference(result);
    return result;
}
exports.readBytes = readBytes;
function readAsciiString(reader) {
    var result = ValueReader.readAsciiString(reader.stream);
    reader.addReference(result);
    return result;
}
exports.readAsciiString = readAsciiString;
function readString(reader) {
    var result = ValueReader.readString(reader.stream);
    reader.addReference(result);
    return result;
}
exports.readString = readString;
function readGuid(reader) {
    var result = ValueReader.readGuid(reader.stream);
    reader.addReference(result);
    return result;
}
exports.readGuid = readGuid;
function readDateTime(reader) {
    var result = ValueReader.readDateTime(reader.stream);
    reader.addReference(result);
    return result;
}
exports.readDateTime = readDateTime;
function readTime(reader) {
    var result = ValueReader.readTime(reader.stream);
    reader.addReference(result);
    return result;
}
exports.readTime = readTime;
function readArray(reader) {
    var stream = reader.stream;
    var count = ValueReader.readCount(stream);
    var a = new Array(count);
    reader.addReference(a);
    for (var i = 0; i < count; ++i) {
        a[i] = reader.deserialize();
    }
    stream.readByte();
    return a;
}
exports.readArray = readArray;
function readSet(reader) {
    var stream = reader.stream;
    var count = ValueReader.readCount(stream);
    var a = new Set();
    reader.addReference(a);
    for (var i = 0; i < count; ++i) {
        a.add(reader.deserialize());
    }
    stream.readByte();
    return a;
}
exports.readSet = readSet;
function readMap(reader) {
    var stream = reader.stream;
    var map = new Map();
    reader.addReference(map);
    var count = ValueReader.readCount(stream);
    for (; count > 0; --count) {
        var key = reader.deserialize();
        var value = reader.deserialize();
        map.set(key, value);
    }
    stream.readByte();
    return map;
}
exports.readMap = readMap;
function readObject(reader) {
    var stream = reader.stream;
    var index = ValueReader.readInt(stream, 123 /* TagOpenbrace */);
    var typeInfo = reader.getTypeInfo(index);
    var type = typeInfo.type;
    var obj = (type) ? new type() : {};
    reader.addReference(obj);
    var names = typeInfo.names;
    var count = names.length;
    for (var i = 0; i < count; ++i) {
        obj[names[i]] = reader.deserialize();
    }
    stream.readByte();
    return obj;
}
exports.readObject = readObject;
function readObjectAsMap(reader) {
    var stream = reader.stream;
    var index = ValueReader.readInt(stream, 123 /* TagOpenbrace */);
    var typeInfo = reader.getTypeInfo(index);
    var map = new Map();
    reader.addReference(map);
    var names = typeInfo.names;
    var count = names.length;
    for (var i = 0; i < count; ++i) {
        map.set(names[i], reader.deserialize());
    }
    stream.readByte();
    return map;
}
exports.readObjectAsMap = readObjectAsMap;
//# sourceMappingURL=ReferenceReader.js.map