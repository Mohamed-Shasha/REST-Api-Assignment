"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| ValueWriter.ts                                           |
|                                                          |
| hprose value writer for TypeScript.                      |
|                                                          |
| LastModified: Jan 11, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
Object.defineProperty(exports, "__esModule", { value: true });
function writeInteger(stream, value) {
    if (0 <= value && value <= 9) {
        stream.writeByte(0x30 + value);
    }
    else {
        if (value === (value | 0)) {
            stream.writeByte(105 /* TagInteger */);
        }
        else {
            stream.writeByte(108 /* TagLong */);
        }
        stream.writeAsciiString('' + value);
        stream.writeByte(59 /* TagSemicolon */);
    }
}
exports.writeInteger = writeInteger;
function writeDouble(stream, value) {
    if (isNaN(value)) {
        stream.writeByte(78 /* TagNaN */);
    }
    else if (isFinite(value)) {
        stream.writeByte(100 /* TagDouble */);
        stream.writeAsciiString('' + value);
        stream.writeByte(59 /* TagSemicolon */);
    }
    else {
        stream.writeByte(73 /* TagInfinity */);
        stream.writeByte((value > 0) ? 43 /* TagPos */ : 45 /* TagNeg */);
    }
}
exports.writeDouble = writeDouble;
function writeBigInt(stream, value) {
    if (0 <= value && value <= 9) {
        stream.writeByte(0x30 + Number(value));
    }
    else {
        stream.writeByte(108 /* TagLong */);
        stream.writeAsciiString('' + value);
        stream.writeByte(59 /* TagSemicolon */);
    }
}
exports.writeBigInt = writeBigInt;
function writeStringBody(stream, value) {
    var n = value.length;
    if (n > 0)
        stream.writeAsciiString('' + n);
    stream.writeByte(34 /* TagQuote */);
    stream.writeString(value);
    stream.writeByte(34 /* TagQuote */);
}
exports.writeStringBody = writeStringBody;
function writeUTCDate(stream, value) {
    var year = value.getUTCFullYear();
    var month = value.getUTCMonth() + 1;
    var day = value.getUTCDate();
    var hour = value.getUTCHours();
    var minute = value.getUTCMinutes();
    var second = value.getUTCSeconds();
    var millisecond = value.getUTCMilliseconds();
    writeDateTime(stream, year, month, day, hour, minute, second, millisecond, true);
}
exports.writeUTCDate = writeUTCDate;
function writeLocalDate(stream, value) {
    var year = value.getFullYear();
    var month = value.getMonth() + 1;
    var day = value.getDate();
    var hour = value.getHours();
    var minute = value.getMinutes();
    var second = value.getSeconds();
    var millisecond = value.getMilliseconds();
    writeDateTime(stream, year, month, day, hour, minute, second, millisecond, false);
}
exports.writeLocalDate = writeLocalDate;
function writeDateTime(stream, year, month, day, hour, minute, second, millisecond, utc) {
    if ((hour === 0) && (minute === 0) && (second === 0) && (millisecond === 0)) {
        writeDate(stream, year, month, day);
    }
    else if ((year === 1970) && (month === 1) && (day === 1)) {
        writeTime(stream, hour, minute, second, millisecond);
    }
    else {
        writeDate(stream, year, month, day);
        writeTime(stream, hour, minute, second, millisecond);
    }
    stream.writeByte(utc ? 90 /* TagUTC */ : 59 /* TagSemicolon */);
}
exports.writeDateTime = writeDateTime;
function writeDate(stream, year, month, day) {
    stream.writeByte(68 /* TagDate */);
    stream.writeAsciiString(('0000' + year).slice(-4));
    stream.writeAsciiString(('00' + month).slice(-2));
    stream.writeAsciiString(('00' + day).slice(-2));
}
exports.writeDate = writeDate;
function writeTime(stream, hour, minute, second, millisecond) {
    stream.writeByte(84 /* TagTime */);
    stream.writeAsciiString(('00' + hour).slice(-2));
    stream.writeAsciiString(('00' + minute).slice(-2));
    stream.writeAsciiString(('00' + second).slice(-2));
    if (millisecond > 0) {
        stream.writeByte(46 /* TagPoint */);
        stream.writeAsciiString(('000' + millisecond).slice(-3));
    }
}
exports.writeTime = writeTime;
//# sourceMappingURL=ValueWriter.js.map