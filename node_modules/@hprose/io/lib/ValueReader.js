"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| ValueReader.ts                                           |
|                                                          |
| hprose value reader for TypeScript.                      |
|                                                          |
| LastModified: Jan 11, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
Object.defineProperty(exports, "__esModule", { value: true });
var guid_typescript_1 = require("guid-typescript");
function readInt(stream, tag) {
    if (tag === void 0) { tag = 59 /* TagSemicolon */; }
    var s = stream.readUntil(tag);
    if (s.length === 0)
        return 0;
    return parseInt(s, 10);
}
exports.readInt = readInt;
function readDouble(stream) {
    return parseFloat(stream.readUntil(59 /* TagSemicolon */));
}
exports.readDouble = readDouble;
function readInfinity(stream) {
    return ((stream.readByte() === 45 /* TagNeg */) ? -Infinity : Infinity);
}
exports.readInfinity = readInfinity;
function readCount(stream) {
    return readInt(stream, 123 /* TagOpenbrace */);
}
exports.readCount = readCount;
function readLength(stream) {
    return readInt(stream, 34 /* TagQuote */);
}
exports.readLength = readLength;
function readString(stream) {
    var n = readLength(stream);
    var result = stream.readString(n);
    stream.readByte();
    return result;
}
exports.readString = readString;
function readBytes(stream) {
    var n = readLength(stream);
    var result = stream.read(n);
    stream.readByte();
    return result;
}
exports.readBytes = readBytes;
function readAsciiString(stream) {
    var n = readLength(stream);
    var result = stream.readAsciiString(n);
    stream.readByte();
    return result;
}
exports.readAsciiString = readAsciiString;
function readGuid(stream) {
    stream.readByte();
    var result = guid_typescript_1.Guid.parse(stream.readAsciiString(36));
    stream.readByte();
    return result;
}
exports.readGuid = readGuid;
function read4Digit(stream) {
    var n = stream.readByte() - 0x30;
    n = n * 10 + stream.readByte() - 0x30;
    n = n * 10 + stream.readByte() - 0x30;
    return n * 10 + stream.readByte() - 0x30;
}
function read2Digit(stream) {
    var n = stream.readByte() - 0x30;
    return n * 10 + stream.readByte() - 0x30;
}
function readMillisecond(stream) {
    var millisecond = stream.readByte() - 0x30;
    millisecond = millisecond * 10 + stream.readByte() - 0x30;
    millisecond = millisecond * 10 + stream.readByte() - 0x30;
    var tag = stream.readByte();
    if ((tag >= 0x30) && (tag <= 0x39)) {
        stream.skip(2);
        tag = stream.readByte();
        if ((tag >= 0x30) && (tag <= 0x39)) {
            stream.skip(2);
            tag = stream.readByte();
        }
    }
    return [millisecond, tag];
}
function readTime(stream) {
    var _a;
    var hour = read2Digit(stream);
    var minute = read2Digit(stream);
    var second = read2Digit(stream);
    var millisecond = 0;
    var tag = stream.readByte();
    if (tag === 46 /* TagPoint */) {
        _a = readMillisecond(stream), millisecond = _a[0], tag = _a[1];
    }
    if (tag === 90 /* TagUTC */) {
        return new Date(Date.UTC(1970, 0, 1, hour, minute, second, millisecond));
    }
    return new Date(1970, 0, 1, hour, minute, second, millisecond);
}
exports.readTime = readTime;
function readDateTime(stream) {
    var _a;
    var year = read4Digit(stream);
    var month = read2Digit(stream) - 1;
    var day = read2Digit(stream);
    var tag = stream.readByte();
    if (tag === 84 /* TagTime */) {
        var hour = read2Digit(stream);
        var minute = read2Digit(stream);
        var second = read2Digit(stream);
        var millisecond = 0;
        tag = stream.readByte();
        if (tag === 46 /* TagPoint */) {
            _a = readMillisecond(stream), millisecond = _a[0], tag = _a[1];
        }
        if (tag === 90 /* TagUTC */) {
            return new Date(Date.UTC(year, month, day, hour, minute, second, millisecond));
        }
        return new Date(year, month, day, hour, minute, second, millisecond);
    }
    if (tag === 90 /* TagUTC */) {
        return new Date(Date.UTC(year, month, day));
    }
    return new Date(year, month, day);
}
exports.readDateTime = readDateTime;
//# sourceMappingURL=ValueReader.js.map