"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| BigIntArraySerializer.ts                                 |
|                                                          |
| hprose bigint array serializer for TypeScript.           |
|                                                          |
| LastModified: Jan 11, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ReferenceSerializer_1 = require("./ReferenceSerializer");
var ValueWriter_1 = require("../ValueWriter");
var Serializer_1 = require("../Serializer");
if ((typeof BigInt64Array !== 'undefined') && (typeof BigUint64Array !== 'undefined')) {
    var BigIntArraySerializer = /** @class */ (function (_super) {
        __extends(BigIntArraySerializer, _super);
        function BigIntArraySerializer() {
            return _super.call(this) || this;
        }
        BigIntArraySerializer.prototype.write = function (writer, value) {
            _super.prototype.write.call(this, writer, value);
            var stream = writer.stream;
            stream.writeByte(97 /* TagList */);
            var n = value.length;
            if (n > 0)
                stream.writeAsciiString('' + n);
            stream.writeByte(123 /* TagOpenbrace */);
            for (var i = 0; i < n; i++) {
                ValueWriter_1.writeBigInt(stream, value[i]);
            }
            stream.writeByte(125 /* TagClosebrace */);
        };
        return BigIntArraySerializer;
    }(ReferenceSerializer_1.ReferenceSerializer));
    var bigintArraySerializer = new BigIntArraySerializer();
    Serializer_1.register(BigInt64Array, bigintArraySerializer);
    Serializer_1.register(BigUint64Array, bigintArraySerializer);
}
//# sourceMappingURL=BigIntArraySerializer.js.map