"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| BigIntSerializer.ts                                      |
|                                                          |
| hprose bigint serializer for TypeScript.                 |
|                                                          |
| LastModified: Jan 11, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ValueWriter_1 = require("../ValueWriter");
var BaseSerializer_1 = require("./BaseSerializer");
var Serializer_1 = require("../Serializer");
if (typeof BigInt !== 'undefined') {
    var BigIntSerializer = /** @class */ (function (_super) {
        __extends(BigIntSerializer, _super);
        function BigIntSerializer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BigIntSerializer.prototype.write = function (writer, value) {
            ValueWriter_1.writeBigInt(writer.stream, value);
        };
        return BigIntSerializer;
    }(BaseSerializer_1.BaseSerializer));
    Serializer_1.register(BigInt, new BigIntSerializer());
}
//# sourceMappingURL=BigIntSerializer.js.map