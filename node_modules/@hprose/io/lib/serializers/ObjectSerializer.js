"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| ObjectSerializer.ts                                      |
|                                                          |
| hprose object serializer for TypeScript.                 |
|                                                          |
| LastModified: Dec 18, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ByteStream_1 = require("../ByteStream");
var ReferenceSerializer_1 = require("./ReferenceSerializer");
var ValueWriter_1 = require("../ValueWriter");
var ObjectSerializer = /** @class */ (function (_super) {
    __extends(ObjectSerializer, _super);
    function ObjectSerializer(obj, name, fields) {
        if (fields === void 0) { fields = []; }
        var _this = _super.call(this) || this;
        _this.type = obj.constructor;
        if (fields.length === 0) {
            for (var key in obj) {
                if (obj.hasOwnProperty(key) && typeof obj[key] !== 'function') {
                    fields[fields.length] = key.toString();
                }
            }
        }
        _this.fields = fields;
        var stream = new ByteStream_1.ByteStream();
        stream.writeByte(99 /* TagClass */);
        ValueWriter_1.writeStringBody(stream, name);
        var n = fields.length;
        if (n > 0)
            stream.writeAsciiString('' + n);
        stream.writeByte(123 /* TagOpenbrace */);
        for (var i = 0; i < n; i++) {
            stream.writeByte(115 /* TagString */);
            ValueWriter_1.writeStringBody(stream, fields[i]);
        }
        stream.writeByte(125 /* TagClosebrace */);
        _this.metadata = stream.takeBytes();
        return _this;
    }
    ObjectSerializer.prototype.write = function (writer, value) {
        var stream = writer.stream;
        var fields = this.fields;
        var metadata = this.metadata;
        var n = fields.length;
        var r = writer.writeClass(this.type, function () {
            stream.write(metadata);
            writer.addReferenceCount(n);
        });
        _super.prototype.write.call(this, writer, value);
        stream.writeByte(111 /* TagObject */);
        stream.writeAsciiString('' + r);
        stream.writeByte(123 /* TagOpenbrace */);
        for (var i = 0; i < n; i++) {
            writer.serialize(value[fields[i]]);
        }
        stream.writeByte(125 /* TagClosebrace */);
    };
    return ObjectSerializer;
}(ReferenceSerializer_1.ReferenceSerializer));
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map