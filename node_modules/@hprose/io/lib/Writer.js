"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| Writer.ts                                                |
|                                                          |
| hprose Writer for TypeScript.                            |
|                                                          |
| LastModified: Jan 11, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Serializer = __importStar(require("./Serializer"));
require("./serializers/BigIntSerializer");
require("./serializers/BigIntArraySerializer");
var WriterRefer = /** @class */ (function () {
    function WriterRefer() {
        this.ref = new Map();
        this.last = 0;
    }
    WriterRefer.prototype.addCount = function (count) {
        this.last += count;
    };
    WriterRefer.prototype.set = function (value) {
        this.ref.set(value, this.last++);
    };
    WriterRefer.prototype.write = function (stream, value) {
        var index = this.ref.get(value);
        if (index !== undefined) {
            stream.writeByte(114 /* TagRef */);
            stream.writeAsciiString('' + index);
            stream.writeByte(59 /* TagSemicolon */);
            return true;
        }
        return false;
    };
    WriterRefer.prototype.reset = function () {
        this.ref.clear();
        this.last = 0;
    };
    return WriterRefer;
}());
var Writer = /** @class */ (function () {
    function Writer(stream, simple, utc) {
        if (simple === void 0) { simple = false; }
        if (utc === void 0) { utc = false; }
        this.stream = stream;
        this.utc = utc;
        this.ref = new Map();
        this.last = 0;
        this.simple = simple;
    }
    Object.defineProperty(Writer.prototype, "simple", {
        get: function () {
            return this.refer === undefined;
        },
        set: function (value) {
            this.refer = value ? undefined : new WriterRefer();
        },
        enumerable: true,
        configurable: true
    });
    Writer.prototype.serialize = function (value) {
        if (value === undefined || value === null) {
            this.stream.writeByte(110 /* TagNull */);
        }
        else {
            Serializer.getInstance(value).serialize(this, value);
        }
    };
    Writer.prototype.write = function (value) {
        if (value === undefined || value === null) {
            this.stream.writeByte(110 /* TagNull */);
        }
        else {
            Serializer.getInstance(value).write(this, value);
        }
    };
    Writer.prototype.writeReference = function (value) {
        return this.refer ? this.refer.write(this.stream, value) : false;
    };
    Writer.prototype.setReference = function (value) {
        if (this.refer)
            this.refer.set(value);
    };
    Writer.prototype.addReferenceCount = function (count) {
        if (this.refer)
            this.refer.addCount(count);
    };
    Writer.prototype.reset = function () {
        if (this.refer)
            this.refer.reset();
        this.ref.clear();
        this.last = 0;
    };
    Writer.prototype.writeClass = function (type, action) {
        var r = this.ref.get(type);
        if (r === undefined) {
            action();
            r = this.last++;
            this.ref.set(type, r);
        }
        return r;
    };
    return Writer;
}());
exports.Writer = Writer;
//# sourceMappingURL=Writer.js.map