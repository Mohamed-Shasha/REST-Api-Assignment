"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| BigIntArrayDeserializer.ts                               |
|                                                          |
| hprose bigint Array deserializer for TypeScript.         |
|                                                          |
| LastModified: Jan 11, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseDeserializer_1 = require("./BaseDeserializer");
var Deserializer_1 = require("../Deserializer");
var ValueReader = __importStar(require("../ValueReader"));
function readBigIntArray(reader, type) {
    var stream = reader.stream;
    var count = ValueReader.readCount(stream);
    var a = new type(count);
    reader.addReference(a);
    var deserializer = Deserializer_1.getInstance(BigInt);
    for (var i = 0; i < count; ++i) {
        a[i] = deserializer.deserialize(reader);
    }
    stream.readByte();
    return a;
}
if (typeof BigInt64Array !== 'undefined') {
    var empty_1 = new BigInt64Array(0);
    var BigInt64ArrayDeserializer = /** @class */ (function (_super) {
        __extends(BigInt64ArrayDeserializer, _super);
        function BigInt64ArrayDeserializer() {
            return _super.call(this, 'BigInt64Array') || this;
        }
        BigInt64ArrayDeserializer.prototype.read = function (reader, tag) {
            switch (tag) {
                case 101 /* TagEmpty */: return empty_1;
                case 97 /* TagList */: return readBigIntArray(reader, BigInt64Array);
                default:
                    return _super.prototype.read.call(this, reader, tag);
            }
        };
        BigInt64ArrayDeserializer.instance = new BigInt64ArrayDeserializer();
        return BigInt64ArrayDeserializer;
    }(BaseDeserializer_1.BaseDeserializer));
    Deserializer_1.register(BigInt64Array, BigInt64ArrayDeserializer.instance);
}
if (typeof BigUint64Array !== 'undefined') {
    var empty_2 = new BigUint64Array(0);
    var BigUint64ArrayDeserializer = /** @class */ (function (_super) {
        __extends(BigUint64ArrayDeserializer, _super);
        function BigUint64ArrayDeserializer() {
            return _super.call(this, 'BigUint64Array') || this;
        }
        BigUint64ArrayDeserializer.prototype.read = function (reader, tag) {
            switch (tag) {
                case 101 /* TagEmpty */: return empty_2;
                case 97 /* TagList */: return readBigIntArray(reader, BigUint64Array);
                default:
                    return _super.prototype.read.call(this, reader, tag);
            }
        };
        BigUint64ArrayDeserializer.instance = new BigUint64ArrayDeserializer();
        return BigUint64ArrayDeserializer;
    }(BaseDeserializer_1.BaseDeserializer));
    Deserializer_1.register(BigUint64Array, BigUint64ArrayDeserializer.instance);
}
//# sourceMappingURL=BigIntArrayDeserializer.js.map