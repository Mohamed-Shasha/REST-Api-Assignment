"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| NumberDeserializer.ts                                    |
|                                                          |
| hprose number deserializer for TypeScript.               |
|                                                          |
| LastModified: Mar 29, 2020                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseDeserializer_1 = require("./BaseDeserializer");
var ValueReader = __importStar(require("../ValueReader"));
var ReferenceReader = __importStar(require("../ReferenceReader"));
var NumberDeserializer = /** @class */ (function (_super) {
    __extends(NumberDeserializer, _super);
    function NumberDeserializer() {
        return _super.call(this, 'number') || this;
    }
    NumberDeserializer.prototype.read = function (reader, tag) {
        if (tag >= 0x30 && tag <= 0x39) {
            return tag - 0x30;
        }
        var stream = reader.stream;
        switch (tag) {
            case 105 /* TagInteger */:
            case 108 /* TagLong */: return ValueReader.readInt(stream);
            case 100 /* TagDouble */: return ValueReader.readDouble(stream);
            case 78 /* TagNaN */: return NaN;
            case 73 /* TagInfinity */: return ValueReader.readInfinity(stream);
            case 116 /* TagTrue */: return 1;
            case 102 /* TagFalse */:
            case 101 /* TagEmpty */: return 0;
            case 115 /* TagString */: return Number(ReferenceReader.readString(reader));
            case 117 /* TagUTF8Char */: return stream.readString(1).charCodeAt(1);
            case 68 /* TagDate */: return ReferenceReader.readDateTime(reader).getTime();
            case 84 /* TagTime */: return ReferenceReader.readTime(reader).getTime();
            case 114 /* TagRef */: {
                var result = reader.readReference();
                if (result instanceof Date) {
                    return result.getTime();
                }
                else {
                    return Number(result.toString());
                }
            }
            default: return _super.prototype.read.call(this, reader, tag);
        }
    };
    NumberDeserializer.instance = new NumberDeserializer();
    return NumberDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.NumberDeserializer = NumberDeserializer;
//# sourceMappingURL=NumberDeserializer.js.map