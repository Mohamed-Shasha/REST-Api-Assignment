"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| BaseDeserializer.ts                                      |
|                                                          |
| hprose base deserializer for TypeScript.                 |
|                                                          |
| LastModified: Jan 6, 2019                                |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
Object.defineProperty(exports, "__esModule", { value: true });
function tagToString(tag) {
    switch (tag) {
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 105 /* TagInteger */: return 'int32 number';
        case 108 /* TagLong */: return 'long number';
        case 100 /* TagDouble */: return 'double number';
        case 110 /* TagNull */: return 'null | undefined';
        case 101 /* TagEmpty */: return 'empty string';
        case 116 /* TagTrue */: return 'true';
        case 102 /* TagFalse */: return 'false';
        case 78 /* TagNaN */: return 'NaN';
        case 73 /* TagInfinity */: return 'Infinity';
        case 68 /* TagDate */:
        case 84 /* TagTime */: return 'Date';
        case 98 /* TagBytes */: return 'Uint8Array';
        case 117 /* TagUTF8Char */:
        case 115 /* TagString */: return 'string';
        case 103 /* TagGuid */: return 'guid string';
        case 97 /* TagList */: return 'Array';
        case 109 /* TagMap */: return 'object | Map';
        case 99 /* TagClass */: return 'class';
        case 111 /* TagObject */: return 'Object';
        case 114 /* TagRef */: return 'Reference';
        case 69 /* TagError */: return 'Error';
        default: throw new Error('Unexpected Tag: 0x' + (tag & 0xFF).toString(16));
    }
}
var BaseDeserializer = /** @class */ (function () {
    function BaseDeserializer(type) {
        if (type === void 0) { type = 'undefined'; }
        this.type = type;
    }
    BaseDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 110 /* TagNull */: return undefined;
            case 114 /* TagRef */: return reader.readReference();
            case 99 /* TagClass */:
                reader.readClass();
                return this.deserialize(reader);
            case 69 /* TagError */:
                throw new Error(reader.deserialize(String));
        }
        throw new Error('Cannot convert ' + tagToString(tag) + ' to ' + this.type + '.');
    };
    BaseDeserializer.prototype.deserialize = function (reader) {
        return this.read(reader, reader.stream.readByte());
    };
    return BaseDeserializer;
}());
exports.BaseDeserializer = BaseDeserializer;
//# sourceMappingURL=BaseDeserializer.js.map