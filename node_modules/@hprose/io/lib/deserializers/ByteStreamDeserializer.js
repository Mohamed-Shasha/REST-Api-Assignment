"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| ByteStreamDeserializer.ts                                |
|                                                          |
| hprose ByteStream deserializer for TypeScript.           |
|                                                          |
| LastModified: Mar 29, 2020                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ByteStream_1 = require("../ByteStream");
var BaseDeserializer_1 = require("./BaseDeserializer");
var TypedArrayDeserializer_1 = require("./TypedArrayDeserializer");
var ReferenceReader_1 = require("../ReferenceReader");
var ByteStreamDeserializer = /** @class */ (function (_super) {
    __extends(ByteStreamDeserializer, _super);
    function ByteStreamDeserializer() {
        return _super.call(this, 'ByteStream') || this;
    }
    ByteStreamDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 98 /* TagBytes */: return new ByteStream_1.ByteStream(ReferenceReader_1.readBytes(reader));
            case 101 /* TagEmpty */: return new ByteStream_1.ByteStream(0);
            case 97 /* TagList */: return new ByteStream_1.ByteStream(TypedArrayDeserializer_1.readIntArray(reader, Uint8Array));
            case 117 /* TagUTF8Char */: return new ByteStream_1.ByteStream(reader.stream.readString(1));
            case 115 /* TagString */: return new ByteStream_1.ByteStream(ReferenceReader_1.readString(reader));
            case 114 /* TagRef */: {
                var result = reader.readReference();
                if (result instanceof Uint8Array) {
                    return new ByteStream_1.ByteStream(result);
                }
                else {
                    return new ByteStream_1.ByteStream(result.toString());
                }
            }
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
    };
    ByteStreamDeserializer.instance = new ByteStreamDeserializer();
    return ByteStreamDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.ByteStreamDeserializer = ByteStreamDeserializer;
//# sourceMappingURL=ByteStreamDeserializer.js.map