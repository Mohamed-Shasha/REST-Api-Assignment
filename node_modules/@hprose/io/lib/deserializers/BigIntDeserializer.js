"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| BigIntDeserializer.ts                                    |
|                                                          |
| hprose bigint deserializer for TypeScript.               |
|                                                          |
| LastModified: Mar 29, 2020                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseDeserializer_1 = require("./BaseDeserializer");
var Deserializer_1 = require("../Deserializer");
var ReferenceReader = __importStar(require("../ReferenceReader"));
if (typeof BigInt !== 'undefined') {
    var BigIntDeserializer = /** @class */ (function (_super) {
        __extends(BigIntDeserializer, _super);
        function BigIntDeserializer() {
            return _super.call(this, 'bigint') || this;
        }
        BigIntDeserializer.prototype.read = function (reader, tag) {
            if (tag >= 0x30 && tag <= 0x39) {
                return BigInt(tag - 0x30);
            }
            var stream = reader.stream;
            switch (tag) {
                case 105 /* TagInteger */:
                case 108 /* TagLong */:
                case 100 /* TagDouble */: return BigInt(stream.readUntil(59 /* TagSemicolon */));
                case 116 /* TagTrue */: return BigInt(1);
                case 102 /* TagFalse */:
                case 101 /* TagEmpty */: return BigInt(0);
                case 115 /* TagString */: return BigInt(ReferenceReader.readString(reader));
                case 117 /* TagUTF8Char */: return BigInt(stream.readString(1).charCodeAt(1));
                case 68 /* TagDate */: return BigInt(ReferenceReader.readDateTime(reader).getTime());
                case 84 /* TagTime */: return BigInt(ReferenceReader.readTime(reader).getTime());
                case 114 /* TagRef */: {
                    var result = reader.readReference();
                    if (result instanceof Date) {
                        return BigInt(result.getTime());
                    }
                    else {
                        return BigInt(result.toString());
                    }
                }
                default: return _super.prototype.read.call(this, reader, tag);
            }
        };
        BigIntDeserializer.instance = new BigIntDeserializer();
        return BigIntDeserializer;
    }(BaseDeserializer_1.BaseDeserializer));
    Deserializer_1.register(BigInt, BigIntDeserializer.instance);
}
//# sourceMappingURL=BigIntDeserializer.js.map