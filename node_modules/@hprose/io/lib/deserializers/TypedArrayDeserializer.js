"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| TypedArrayDeserializer.ts                                |
|                                                          |
| hprose TypedArray deserializer for TypeScript.           |
|                                                          |
| LastModified: Mar 29, 2020                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ByteStream_1 = require("../ByteStream");
var IntDeserializer_1 = require("./IntDeserializer");
var NumberDeserializer_1 = require("./NumberDeserializer");
var BaseDeserializer_1 = require("./BaseDeserializer");
var ValueReader_1 = require("../ValueReader");
var ReferenceReader_1 = require("../ReferenceReader");
function readIntArray(reader, type) {
    var stream = reader.stream;
    var count = ValueReader_1.readCount(stream);
    var a = new type(count);
    reader.addReference(a);
    var deserializer = IntDeserializer_1.IntDeserializer.instance;
    for (var i = 0; i < count; ++i) {
        a[i] = deserializer.deserialize(reader);
    }
    stream.readByte();
    return a;
}
exports.readIntArray = readIntArray;
function readNumberArray(reader, type) {
    var stream = reader.stream;
    var count = ValueReader_1.readCount(stream);
    var a = new type(count);
    reader.addReference(a);
    var deserializer = NumberDeserializer_1.NumberDeserializer.instance;
    for (var i = 0; i < count; ++i) {
        a[i] = deserializer.deserialize(reader);
    }
    stream.readByte();
    return a;
}
exports.readNumberArray = readNumberArray;
var emptyInt8Array = new Int8Array(0);
var Int8ArrayDeserializer = /** @class */ (function (_super) {
    __extends(Int8ArrayDeserializer, _super);
    function Int8ArrayDeserializer() {
        return _super.call(this, 'Int8Array') || this;
    }
    Int8ArrayDeserializer.prototype.read = function (reader, tag) {
        var bytes;
        switch (tag) {
            case 101 /* TagEmpty */: return emptyInt8Array;
            case 97 /* TagList */: return readIntArray(reader, Int8Array);
            case 98 /* TagBytes */:
                bytes = ReferenceReader_1.readBytes(reader);
                break;
            case 117 /* TagUTF8Char */:
                bytes = new ByteStream_1.ByteStream(reader.stream.readString(1)).bytes;
                break;
            case 115 /* TagString */:
                bytes = new ByteStream_1.ByteStream(ReferenceReader_1.readString(reader)).bytes;
                break;
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
        return new Int8Array(bytes.buffer, bytes.byteOffset, bytes.length);
    };
    Int8ArrayDeserializer.instance = new Int8ArrayDeserializer();
    return Int8ArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Int8ArrayDeserializer = Int8ArrayDeserializer;
var emptyInt16Array = new Int16Array(0);
var Int16ArrayDeserializer = /** @class */ (function (_super) {
    __extends(Int16ArrayDeserializer, _super);
    function Int16ArrayDeserializer() {
        return _super.call(this, 'Int16Array') || this;
    }
    Int16ArrayDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 101 /* TagEmpty */: return emptyInt16Array;
            case 97 /* TagList */: return readIntArray(reader, Int16Array);
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
    };
    Int16ArrayDeserializer.instance = new Int16ArrayDeserializer();
    return Int16ArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Int16ArrayDeserializer = Int16ArrayDeserializer;
var emptyInt32Array = new Int32Array(0);
var Int32ArrayDeserializer = /** @class */ (function (_super) {
    __extends(Int32ArrayDeserializer, _super);
    function Int32ArrayDeserializer() {
        return _super.call(this, 'Int32Array') || this;
    }
    Int32ArrayDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 101 /* TagEmpty */: return emptyInt32Array;
            case 97 /* TagList */: return readIntArray(reader, Int32Array);
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
    };
    Int32ArrayDeserializer.instance = new Int32ArrayDeserializer();
    return Int32ArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Int32ArrayDeserializer = Int32ArrayDeserializer;
var emptyUint8Array = new Uint8Array(0);
var Uint8ArrayDeserializer = /** @class */ (function (_super) {
    __extends(Uint8ArrayDeserializer, _super);
    function Uint8ArrayDeserializer() {
        return _super.call(this, 'Uint8Array') || this;
    }
    Uint8ArrayDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 98 /* TagBytes */: return ReferenceReader_1.readBytes(reader);
            case 101 /* TagEmpty */: return emptyUint8Array;
            case 97 /* TagList */: return readIntArray(reader, Uint8Array);
            case 117 /* TagUTF8Char */: return new ByteStream_1.ByteStream(reader.stream.readString(1)).bytes;
            case 115 /* TagString */: return new ByteStream_1.ByteStream(ReferenceReader_1.readString(reader)).bytes;
            case 114 /* TagRef */: {
                var result = reader.readReference();
                if (result instanceof Uint8Array) {
                    return result;
                }
                else {
                    return new ByteStream_1.ByteStream(result.toString()).bytes;
                }
            }
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
    };
    Uint8ArrayDeserializer.instance = new Uint8ArrayDeserializer();
    return Uint8ArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Uint8ArrayDeserializer = Uint8ArrayDeserializer;
var emptyUint8ClampedArray = new Uint8ClampedArray(0);
var Uint8ClampedArrayDeserializer = /** @class */ (function (_super) {
    __extends(Uint8ClampedArrayDeserializer, _super);
    function Uint8ClampedArrayDeserializer() {
        return _super.call(this, 'Uint8ClampedArray') || this;
    }
    Uint8ClampedArrayDeserializer.prototype.read = function (reader, tag) {
        var bytes;
        switch (tag) {
            case 101 /* TagEmpty */: return emptyUint8ClampedArray;
            case 97 /* TagList */: return readIntArray(reader, Uint8ClampedArray);
            case 98 /* TagBytes */:
                bytes = ReferenceReader_1.readBytes(reader);
                break;
            case 117 /* TagUTF8Char */:
                bytes = new ByteStream_1.ByteStream(reader.stream.readString(1)).bytes;
                break;
            case 115 /* TagString */:
                bytes = new ByteStream_1.ByteStream(ReferenceReader_1.readString(reader)).bytes;
                break;
            case 114 /* TagRef */: {
                var result = reader.readReference();
                if (result instanceof Uint8ClampedArray) {
                    return result;
                }
                if (result instanceof Uint8Array) {
                    bytes = result;
                }
                else {
                    bytes = new ByteStream_1.ByteStream(result.toString()).bytes;
                }
                break;
            }
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
        return new Uint8ClampedArray(bytes.buffer, bytes.byteOffset, bytes.length);
    };
    Uint8ClampedArrayDeserializer.instance = new Uint8ClampedArrayDeserializer();
    return Uint8ClampedArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Uint8ClampedArrayDeserializer = Uint8ClampedArrayDeserializer;
var emptyUint16Array = new Uint16Array(0);
var Uint16ArrayDeserializer = /** @class */ (function (_super) {
    __extends(Uint16ArrayDeserializer, _super);
    function Uint16ArrayDeserializer() {
        return _super.call(this, 'Uint16Array') || this;
    }
    Uint16ArrayDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 101 /* TagEmpty */: return emptyUint16Array;
            case 97 /* TagList */: return readIntArray(reader, Uint16Array);
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
    };
    Uint16ArrayDeserializer.instance = new Uint16ArrayDeserializer();
    return Uint16ArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Uint16ArrayDeserializer = Uint16ArrayDeserializer;
var emptyUint32Array = new Uint32Array(0);
var Uint32ArrayDeserializer = /** @class */ (function (_super) {
    __extends(Uint32ArrayDeserializer, _super);
    function Uint32ArrayDeserializer() {
        return _super.call(this, 'Uint32Array') || this;
    }
    Uint32ArrayDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 101 /* TagEmpty */: return emptyUint32Array;
            case 97 /* TagList */: return readIntArray(reader, Uint32Array);
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
    };
    Uint32ArrayDeserializer.instance = new Uint32ArrayDeserializer();
    return Uint32ArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Uint32ArrayDeserializer = Uint32ArrayDeserializer;
var emptyFloat32Array = new Float32Array(0);
var Float32ArrayDeserializer = /** @class */ (function (_super) {
    __extends(Float32ArrayDeserializer, _super);
    function Float32ArrayDeserializer() {
        return _super.call(this, 'Float32Array') || this;
    }
    Float32ArrayDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 101 /* TagEmpty */: return emptyFloat32Array;
            case 97 /* TagList */: return readNumberArray(reader, Float32Array);
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
    };
    Float32ArrayDeserializer.instance = new Float32ArrayDeserializer();
    return Float32ArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Float32ArrayDeserializer = Float32ArrayDeserializer;
var emptyFloat64Array = new Float64Array(0);
var Float64ArrayDeserializer = /** @class */ (function (_super) {
    __extends(Float64ArrayDeserializer, _super);
    function Float64ArrayDeserializer() {
        return _super.call(this, 'Float64Array') || this;
    }
    Float64ArrayDeserializer.prototype.read = function (reader, tag) {
        switch (tag) {
            case 101 /* TagEmpty */: return emptyFloat64Array;
            case 97 /* TagList */: return readNumberArray(reader, Float64Array);
            default:
                return _super.prototype.read.call(this, reader, tag);
        }
    };
    Float64ArrayDeserializer.instance = new Float64ArrayDeserializer();
    return Float64ArrayDeserializer;
}(BaseDeserializer_1.BaseDeserializer));
exports.Float64ArrayDeserializer = Float64ArrayDeserializer;
//# sourceMappingURL=TypedArrayDeserializer.js.map