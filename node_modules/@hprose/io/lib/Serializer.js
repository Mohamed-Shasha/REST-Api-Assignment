"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| Serializer.ts                                            |
|                                                          |
| hprose Serializer for TypeScript.                        |
|                                                          |
| LastModified: Dec 18, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ByteStream_1 = require("./ByteStream");
var BaseSerializer_1 = require("./serializers/BaseSerializer");
var NumberSerializer_1 = require("./serializers/NumberSerializer");
var BooleanSerializer_1 = require("./serializers/BooleanSerializer");
var StringSerializer_1 = require("./serializers/StringSerializer");
var DateSerializer_1 = require("./serializers/DateSerializer");
var BytesSerializer_1 = require("./serializers/BytesSerializer");
var GuidSerializer_1 = require("./serializers/GuidSerializer");
var TypedArraySerializer_1 = require("./serializers/TypedArraySerializer");
var ArraySerializer_1 = require("./serializers/ArraySerializer");
var SetSerializer_1 = require("./serializers/SetSerializer");
var MapSerializer_1 = require("./serializers/MapSerializer");
var DictionarySerializer_1 = require("./serializers/DictionarySerializer");
var ObjectSerializer_1 = require("./serializers/ObjectSerializer");
var ErrorSerializer_1 = require("./serializers/ErrorSerializer");
var TypeManager = __importStar(require("./TypeManager"));
var ValueWriter_1 = require("./ValueWriter");
var guid_typescript_1 = require("guid-typescript");
var serializers = new Map();
var nullSerializer = new BaseSerializer_1.BaseSerializer();
var numberSerializer = new NumberSerializer_1.NumberSerializer();
var booleanSerializer = new BooleanSerializer_1.BooleanSerializer();
var stringSerializer = new StringSerializer_1.StringSerializer();
var dateSerializer = new DateSerializer_1.DateSerializer();
var bytesSerializer = new BytesSerializer_1.BytesSerializer();
var guidSerializer = new GuidSerializer_1.GuidSerializer();
var intArraySerializer = new TypedArraySerializer_1.TypedArraySerializer(ValueWriter_1.writeInteger);
var doubleArraySerializer = new TypedArraySerializer_1.TypedArraySerializer(ValueWriter_1.writeDouble);
var arraySerializer = new ArraySerializer_1.ArraySerializer();
var setSerializer = new SetSerializer_1.SetSerializer();
var mapSerializer = new MapSerializer_1.MapSerializer();
var dictionarySerializer = new DictionarySerializer_1.DictionarySerializer();
var errorSerializer = new ErrorSerializer_1.ErrorSerializer();
function register(type, serializer) {
    serializers.set(type, serializer);
}
exports.register = register;
function getInstance(value) {
    var type = value.constructor;
    switch (type) {
        case Function: return nullSerializer;
        case Number: return numberSerializer;
        case Boolean: return booleanSerializer;
        case String: return stringSerializer;
        case Date: return dateSerializer;
        case guid_typescript_1.Guid: return guidSerializer;
        case Array: return arraySerializer;
        case Set: return setSerializer;
        case Map: return mapSerializer;
        case ArrayBuffer:
        case Uint8Array:
        case Uint8ClampedArray:
        case ByteStream_1.ByteStream: return bytesSerializer;
        case Int8Array:
        case Int16Array:
        case Int32Array:
        case Uint16Array:
        case Uint32Array: return intArraySerializer;
        case Float32Array:
        case Float64Array: return doubleArraySerializer;
        case Error: return errorSerializer;
    }
    var serializer = serializers.get(type);
    if (serializer !== undefined)
        return serializer;
    if (Array.isArray(value) || Object.prototype.toString.call(value) === '[object Arguments]')
        return arraySerializer;
    if (value instanceof Error) {
        register(type, errorSerializer);
        return errorSerializer;
    }
    var name = TypeManager.getName(type);
    if (name === '')
        return dictionarySerializer;
    if (name === 'GeneratorFunction')
        return nullSerializer;
    if (name === 'AsyncFunction')
        return nullSerializer;
    var objectSerializer = new ObjectSerializer_1.ObjectSerializer(value, name);
    register(type, objectSerializer);
    return objectSerializer;
}
exports.getInstance = getInstance;
//# sourceMappingURL=Serializer.js.map