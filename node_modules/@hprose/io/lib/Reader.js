"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| Reader.ts                                                |
|                                                          |
| hprose Reader for TypeScript.                            |
|                                                          |
| LastModified: Jan 11, 2019                               |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ValueReader_1 = require("./ValueReader");
var TypeManager = __importStar(require("./TypeManager"));
var Deserializer = __importStar(require("./Deserializer"));
require("./deserializers/BigIntDeserializer");
require("./deserializers/BigIntArrayDeserializer");
var ReaderRefer = /** @class */ (function () {
    function ReaderRefer() {
        this.ref = [];
    }
    Object.defineProperty(ReaderRefer.prototype, "lastIndex", {
        get: function () {
            return this.ref.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    ReaderRefer.prototype.add = function (value) {
        this.ref.push(value);
    };
    ReaderRefer.prototype.set = function (index, value) {
        this.ref[index] = value;
    };
    ReaderRefer.prototype.read = function (index) {
        return this.ref[index];
    };
    ReaderRefer.prototype.reset = function () {
        this.ref.length = 0;
    };
    return ReaderRefer;
}());
var Reader = /** @class */ (function () {
    function Reader(stream, simple) {
        if (simple === void 0) { simple = false; }
        this.stream = stream;
        this.ref = [];
        this.longType = 'number';
        this.dictType = 'object';
        this.simple = simple;
    }
    Object.defineProperty(Reader.prototype, "simple", {
        get: function () {
            return this.refer === undefined;
        },
        set: function (value) {
            this.refer = value ? undefined : new ReaderRefer();
        },
        enumerable: true,
        configurable: true
    });
    Reader.prototype.deserialize = function (type) {
        return Deserializer.getInstance(type).deserialize(this);
    };
    Reader.prototype.read = function (tag, type) {
        return Deserializer.getInstance(type).read(this, tag);
    };
    Reader.prototype.readClass = function () {
        var stream = this.stream;
        var name = ValueReader_1.readString(stream);
        var count = ValueReader_1.readCount(stream);
        var names = new Array(count);
        var strDeserialize = Deserializer.getInstance(String);
        for (var i = 0; i < count; ++i) {
            names[i] = strDeserialize.deserialize(this);
        }
        stream.readByte();
        this.ref.push({
            name: name,
            names: names,
            type: TypeManager.getType(name)
        });
    };
    Reader.prototype.getTypeInfo = function (index) {
        return this.ref[index];
    };
    Reader.prototype.readReference = function () {
        return this.refer ? this.refer.read(ValueReader_1.readInt(this.stream)) : undefined;
    };
    Reader.prototype.addReference = function (value) {
        if (this.refer)
            this.refer.add(value);
    };
    Reader.prototype.setReference = function (index, value) {
        if (this.refer)
            this.refer.set(index, value);
    };
    Object.defineProperty(Reader.prototype, "lastReferenceIndex", {
        get: function () {
            return this.refer ? this.refer.lastIndex : -1;
        },
        enumerable: true,
        configurable: true
    });
    Reader.prototype.reset = function () {
        if (this.refer)
            this.refer.reset();
        this.ref.length = 0;
    };
    return Reader;
}());
exports.Reader = Reader;
//# sourceMappingURL=Reader.js.map