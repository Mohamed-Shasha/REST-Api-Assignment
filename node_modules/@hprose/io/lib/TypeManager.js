"use strict";
/*--------------------------------------------------------*\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: https://hprose.com                     |
|                                                          |
| TypeManager.ts                                           |
|                                                          |
| hprose TypeManager for TypeScript.                       |
|                                                          |
| LastModified: Jan 6, 2019                                |
| Author: Ma Bingyao <andot@hprose.com>                    |
|                                                          |
\*________________________________________________________*/
Object.defineProperty(exports, "__esModule", { value: true });
var typeCache = Object.create(null);
var nameCache = new WeakMap();
if (!('name' in Function.prototype)) {
    Object.defineProperty(Function.prototype, 'name', {
        get: function () {
            var ctor = this.toString();
            return ctor.substr(0, ctor.indexOf('(')).replace(/(^\s*function\s*)|(\s*$)/ig, '');
        },
        writable: false,
        enumerable: false,
        configurable: true
    });
}
/**
 * Registers a type.
 */
function register(type, name) {
    if (name === undefined)
        name = type.name;
    nameCache.set(type, name);
    typeCache[name] = type;
}
exports.register = register;
/**
 * Returns whether the name has been registered.
 */
function isRegistered(name) {
    return name in typeCache;
}
exports.isRegistered = isRegistered;
/**
 * Gets name by type.
 */
function getName(type) {
    if (!type)
        return '';
    var name = nameCache.get(type);
    if (name)
        return name;
    name = type.name;
    if (name === '' || name === 'Object')
        return '';
    nameCache.set(type, name);
    typeCache[name] = type;
    return name;
}
exports.getName = getName;
var root = null;
try {
    root = typeof global === 'object' ? global : window;
}
catch (e) { }
function loadType(name) {
    if (!root)
        return undefined;
    var obj = root;
    var names = name.split('.');
    for (var i = 0; i < names.length; i++) {
        obj = obj[names[i]];
        if (obj === undefined) {
            return undefined;
        }
    }
    if (typeof (obj) !== 'function')
        return undefined;
    return obj;
}
function findType(alias, positions, i, c) {
    if (i < positions.length) {
        alias[positions[i++]] = c;
        var type = findType(alias, positions, i, '.');
        if (type === undefined && i < positions.length) {
            type = findType(alias, positions, i, '_');
        }
        return type;
    }
    return loadType(alias.join(''));
}
/**
 * Gets type by name.
 */
function getType(name) {
    var type = typeCache[name];
    if (type)
        return type;
    type = loadType(name);
    if (type) {
        register(type, name);
        return type;
    }
    var positions = [];
    var pos = name.indexOf('_');
    while (pos >= 0) {
        positions[positions.length] = pos;
        pos = name.indexOf('_', pos + 1);
    }
    if (positions.length > 0) {
        var alias = name.split('');
        type = findType(alias, positions, 0, '.');
        if (type === undefined) {
            type = findType(alias, positions, 0, '_');
        }
        if (type) {
            register(type, name);
            return type;
        }
    }
    type = function () { };
    Object.defineProperty(type, 'name', { value: name });
    register(type, name);
    return type;
}
exports.getType = getType;
//# sourceMappingURL=TypeManager.js.map